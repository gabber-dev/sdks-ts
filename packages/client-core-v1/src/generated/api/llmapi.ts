/* tslint:disable */
/* eslint-disable */
/**
 * Gabber API Reference
 * The Gabber API is a set of APIs that allow you to interact with the Gabber platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { BadRequest } from '../model';
// @ts-ignore
import type { Context } from '../model';
// @ts-ignore
import type { ContextAdvancedMemoryQueryRequest } from '../model';
// @ts-ignore
import type { ContextAdvancedMemoryQueryResult } from '../model';
// @ts-ignore
import type { ContextCreateRequest } from '../model';
// @ts-ignore
import type { ContextMessage } from '../model';
// @ts-ignore
import type { ContextMessageCreateParams } from '../model';
// @ts-ignore
import type { LLM } from '../model';
// @ts-ignore
import type { ListContextMessages200Response } from '../model';
// @ts-ignore
import type { ListContexts200Response } from '../model';
// @ts-ignore
import type { ListLLMs200Response } from '../model';
/**
 * LLMApi - axios parameter creator
 * @export
 */
export const LLMApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new Context with the given configuration. 
         * @summary Create a new Context.
         * @param {ContextCreateRequest} contextCreateRequest 
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContext: async (contextCreateRequest: ContextCreateRequest, xHumanId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contextCreateRequest' is not null or undefined
            assertParamExists('createContext', 'contextCreateRequest', contextCreateRequest)
            const localVarPath = `/v1/llm/context`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xHumanId != null) {
                localVarHeaderParameter['x-human-id'] = String(xHumanId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contextCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new ContextMessage with the given configuration. 
         * @summary Create a new ContextMessage.
         * @param {string} context The unique identifier of the Context.
         * @param {ContextMessageCreateParams} contextMessageCreateParams 
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContextMessage: async (context: string, contextMessageCreateParams: ContextMessageCreateParams, xHumanId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'context' is not null or undefined
            assertParamExists('createContextMessage', 'context', context)
            // verify required parameter 'contextMessageCreateParams' is not null or undefined
            assertParamExists('createContextMessage', 'contextMessageCreateParams', contextMessageCreateParams)
            const localVarPath = `/v1/llm/context/{context}/message`
                .replace(`{${"context"}}`, encodeURIComponent(String(context)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xHumanId != null) {
                localVarHeaderParameter['x-human-id'] = String(xHumanId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contextMessageCreateParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the Context with the given identifier. 
         * @summary Retrieve a Context.
         * @param {string} context The unique identifier of the Context.
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContext: async (context: string, xHumanId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'context' is not null or undefined
            assertParamExists('getContext', 'context', context)
            const localVarPath = `/v1/llm/context/{context}`
                .replace(`{${"context"}}`, encodeURIComponent(String(context)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xHumanId != null) {
                localVarHeaderParameter['x-human-id'] = String(xHumanId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the ContextMessage with the given identifier. 
         * @summary Retrieve a ContextMessage.
         * @param {string} context The unique identifier of the Context.
         * @param {string} message The unique identifier of the ContextMessage.
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContextMessage: async (context: string, message: string, xHumanId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'context' is not null or undefined
            assertParamExists('getContextMessage', 'context', context)
            // verify required parameter 'message' is not null or undefined
            assertParamExists('getContextMessage', 'message', message)
            const localVarPath = `/v1/llm/context/{context}/message/{message}`
                .replace(`{${"context"}}`, encodeURIComponent(String(context)))
                .replace(`{${"message"}}`, encodeURIComponent(String(message)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xHumanId != null) {
                localVarHeaderParameter['x-human-id'] = String(xHumanId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of llms
         * @param {string} llm 
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLLM: async (llm: string, xHumanId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'llm' is not null or undefined
            assertParamExists('getLLM', 'llm', llm)
            const localVarPath = `/v1/llm/{llm}`
                .replace(`{${"llm"}}`, encodeURIComponent(String(llm)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xHumanId != null) {
                localVarHeaderParameter['x-human-id'] = String(xHumanId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all ContextMessages associated with the given Context. 
         * @summary List ContextMessages.
         * @param {string} context The unique identifier of the Context.
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {Array<string>} [messageIds] A comma-separated list of message IDs to fetch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContextMessages: async (context: string, xHumanId?: string, messageIds?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'context' is not null or undefined
            assertParamExists('listContextMessages', 'context', context)
            const localVarPath = `/v1/llm/context/{context}/message/list`
                .replace(`{${"context"}}`, encodeURIComponent(String(context)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (messageIds) {
                localVarQueryParameter['message_ids'] = messageIds;
            }

            if (xHumanId != null) {
                localVarHeaderParameter['x-human-id'] = String(xHumanId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all Contexts associated with the given human. 
         * @summary List Contexts.
         * @param {Array<string>} contextIds A comma-separated list of context IDs to fetch.
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContexts: async (contextIds: Array<string>, xHumanId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contextIds' is not null or undefined
            assertParamExists('listContexts', 'contextIds', contextIds)
            const localVarPath = `/v1/llm/context/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (contextIds) {
                localVarQueryParameter['context_ids'] = contextIds;
            }

            if (xHumanId != null) {
                localVarHeaderParameter['x-human-id'] = String(xHumanId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of llms
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLLMs: async (xHumanId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/llm/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xHumanId != null) {
                localVarHeaderParameter['x-human-id'] = String(xHumanId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the ContextMemory with the given identifier. 
         * @summary Query the advanced context memory
         * @param {string} context The unique identifier of the Context.
         * @param {ContextAdvancedMemoryQueryRequest} contextAdvancedMemoryQueryRequest 
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryAdvancedContextMemory: async (context: string, contextAdvancedMemoryQueryRequest: ContextAdvancedMemoryQueryRequest, xHumanId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'context' is not null or undefined
            assertParamExists('queryAdvancedContextMemory', 'context', context)
            // verify required parameter 'contextAdvancedMemoryQueryRequest' is not null or undefined
            assertParamExists('queryAdvancedContextMemory', 'contextAdvancedMemoryQueryRequest', contextAdvancedMemoryQueryRequest)
            const localVarPath = `/v1/llm/context/{context}/advanced_memory/query`
                .replace(`{${"context"}}`, encodeURIComponent(String(context)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xHumanId != null) {
                localVarHeaderParameter['x-human-id'] = String(xHumanId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contextAdvancedMemoryQueryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LLMApi - functional programming interface
 * @export
 */
export const LLMApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LLMApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new Context with the given configuration. 
         * @summary Create a new Context.
         * @param {ContextCreateRequest} contextCreateRequest 
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createContext(contextCreateRequest: ContextCreateRequest, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Context>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createContext(contextCreateRequest, xHumanId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LLMApi.createContext']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new ContextMessage with the given configuration. 
         * @summary Create a new ContextMessage.
         * @param {string} context The unique identifier of the Context.
         * @param {ContextMessageCreateParams} contextMessageCreateParams 
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createContextMessage(context: string, contextMessageCreateParams: ContextMessageCreateParams, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContextMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createContextMessage(context, contextMessageCreateParams, xHumanId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LLMApi.createContextMessage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the Context with the given identifier. 
         * @summary Retrieve a Context.
         * @param {string} context The unique identifier of the Context.
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContext(context: string, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Context>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContext(context, xHumanId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LLMApi.getContext']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the ContextMessage with the given identifier. 
         * @summary Retrieve a ContextMessage.
         * @param {string} context The unique identifier of the Context.
         * @param {string} message The unique identifier of the ContextMessage.
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContextMessage(context: string, message: string, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContextMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContextMessage(context, message, xHumanId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LLMApi.getContextMessage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a list of llms
         * @param {string} llm 
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLLM(llm: string, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LLM>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLLM(llm, xHumanId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LLMApi.getLLM']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all ContextMessages associated with the given Context. 
         * @summary List ContextMessages.
         * @param {string} context The unique identifier of the Context.
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {Array<string>} [messageIds] A comma-separated list of message IDs to fetch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listContextMessages(context: string, xHumanId?: string, messageIds?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListContextMessages200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listContextMessages(context, xHumanId, messageIds, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LLMApi.listContextMessages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all Contexts associated with the given human. 
         * @summary List Contexts.
         * @param {Array<string>} contextIds A comma-separated list of context IDs to fetch.
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listContexts(contextIds: Array<string>, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListContexts200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listContexts(contextIds, xHumanId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LLMApi.listContexts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a list of llms
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLLMs(xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListLLMs200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listLLMs(xHumanId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LLMApi.listLLMs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the ContextMemory with the given identifier. 
         * @summary Query the advanced context memory
         * @param {string} context The unique identifier of the Context.
         * @param {ContextAdvancedMemoryQueryRequest} contextAdvancedMemoryQueryRequest 
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryAdvancedContextMemory(context: string, contextAdvancedMemoryQueryRequest: ContextAdvancedMemoryQueryRequest, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContextAdvancedMemoryQueryResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryAdvancedContextMemory(context, contextAdvancedMemoryQueryRequest, xHumanId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LLMApi.queryAdvancedContextMemory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LLMApi - factory interface
 * @export
 */
export const LLMApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LLMApiFp(configuration)
    return {
        /**
         * Create a new Context with the given configuration. 
         * @summary Create a new Context.
         * @param {ContextCreateRequest} contextCreateRequest 
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContext(contextCreateRequest: ContextCreateRequest, xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Context> {
            return localVarFp.createContext(contextCreateRequest, xHumanId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new ContextMessage with the given configuration. 
         * @summary Create a new ContextMessage.
         * @param {string} context The unique identifier of the Context.
         * @param {ContextMessageCreateParams} contextMessageCreateParams 
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContextMessage(context: string, contextMessageCreateParams: ContextMessageCreateParams, xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<ContextMessage> {
            return localVarFp.createContextMessage(context, contextMessageCreateParams, xHumanId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the Context with the given identifier. 
         * @summary Retrieve a Context.
         * @param {string} context The unique identifier of the Context.
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContext(context: string, xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Context> {
            return localVarFp.getContext(context, xHumanId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the ContextMessage with the given identifier. 
         * @summary Retrieve a ContextMessage.
         * @param {string} context The unique identifier of the Context.
         * @param {string} message The unique identifier of the ContextMessage.
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContextMessage(context: string, message: string, xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<ContextMessage> {
            return localVarFp.getContextMessage(context, message, xHumanId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of llms
         * @param {string} llm 
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLLM(llm: string, xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<LLM> {
            return localVarFp.getLLM(llm, xHumanId, options).then((request) => request(axios, basePath));
        },
        /**
         * List all ContextMessages associated with the given Context. 
         * @summary List ContextMessages.
         * @param {string} context The unique identifier of the Context.
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {Array<string>} [messageIds] A comma-separated list of message IDs to fetch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContextMessages(context: string, xHumanId?: string, messageIds?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<ListContextMessages200Response> {
            return localVarFp.listContextMessages(context, xHumanId, messageIds, options).then((request) => request(axios, basePath));
        },
        /**
         * List all Contexts associated with the given human. 
         * @summary List Contexts.
         * @param {Array<string>} contextIds A comma-separated list of context IDs to fetch.
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContexts(contextIds: Array<string>, xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<ListContexts200Response> {
            return localVarFp.listContexts(contextIds, xHumanId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of llms
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLLMs(xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<ListLLMs200Response> {
            return localVarFp.listLLMs(xHumanId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the ContextMemory with the given identifier. 
         * @summary Query the advanced context memory
         * @param {string} context The unique identifier of the Context.
         * @param {ContextAdvancedMemoryQueryRequest} contextAdvancedMemoryQueryRequest 
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryAdvancedContextMemory(context: string, contextAdvancedMemoryQueryRequest: ContextAdvancedMemoryQueryRequest, xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<ContextAdvancedMemoryQueryResult> {
            return localVarFp.queryAdvancedContextMemory(context, contextAdvancedMemoryQueryRequest, xHumanId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LLMApi - object-oriented interface
 * @export
 * @class LLMApi
 * @extends {BaseAPI}
 */
export class LLMApi extends BaseAPI {
    /**
     * Create a new Context with the given configuration. 
     * @summary Create a new Context.
     * @param {ContextCreateRequest} contextCreateRequest 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LLMApi
     */
    public createContext(contextCreateRequest: ContextCreateRequest, xHumanId?: string, options?: RawAxiosRequestConfig) {
        return LLMApiFp(this.configuration).createContext(contextCreateRequest, xHumanId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new ContextMessage with the given configuration. 
     * @summary Create a new ContextMessage.
     * @param {string} context The unique identifier of the Context.
     * @param {ContextMessageCreateParams} contextMessageCreateParams 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LLMApi
     */
    public createContextMessage(context: string, contextMessageCreateParams: ContextMessageCreateParams, xHumanId?: string, options?: RawAxiosRequestConfig) {
        return LLMApiFp(this.configuration).createContextMessage(context, contextMessageCreateParams, xHumanId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the Context with the given identifier. 
     * @summary Retrieve a Context.
     * @param {string} context The unique identifier of the Context.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LLMApi
     */
    public getContext(context: string, xHumanId?: string, options?: RawAxiosRequestConfig) {
        return LLMApiFp(this.configuration).getContext(context, xHumanId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the ContextMessage with the given identifier. 
     * @summary Retrieve a ContextMessage.
     * @param {string} context The unique identifier of the Context.
     * @param {string} message The unique identifier of the ContextMessage.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LLMApi
     */
    public getContextMessage(context: string, message: string, xHumanId?: string, options?: RawAxiosRequestConfig) {
        return LLMApiFp(this.configuration).getContextMessage(context, message, xHumanId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of llms
     * @param {string} llm 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LLMApi
     */
    public getLLM(llm: string, xHumanId?: string, options?: RawAxiosRequestConfig) {
        return LLMApiFp(this.configuration).getLLM(llm, xHumanId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all ContextMessages associated with the given Context. 
     * @summary List ContextMessages.
     * @param {string} context The unique identifier of the Context.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {Array<string>} [messageIds] A comma-separated list of message IDs to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LLMApi
     */
    public listContextMessages(context: string, xHumanId?: string, messageIds?: Array<string>, options?: RawAxiosRequestConfig) {
        return LLMApiFp(this.configuration).listContextMessages(context, xHumanId, messageIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all Contexts associated with the given human. 
     * @summary List Contexts.
     * @param {Array<string>} contextIds A comma-separated list of context IDs to fetch.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LLMApi
     */
    public listContexts(contextIds: Array<string>, xHumanId?: string, options?: RawAxiosRequestConfig) {
        return LLMApiFp(this.configuration).listContexts(contextIds, xHumanId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of llms
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LLMApi
     */
    public listLLMs(xHumanId?: string, options?: RawAxiosRequestConfig) {
        return LLMApiFp(this.configuration).listLLMs(xHumanId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the ContextMemory with the given identifier. 
     * @summary Query the advanced context memory
     * @param {string} context The unique identifier of the Context.
     * @param {ContextAdvancedMemoryQueryRequest} contextAdvancedMemoryQueryRequest 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LLMApi
     */
    public queryAdvancedContextMemory(context: string, contextAdvancedMemoryQueryRequest: ContextAdvancedMemoryQueryRequest, xHumanId?: string, options?: RawAxiosRequestConfig) {
        return LLMApiFp(this.configuration).queryAdvancedContextMemory(context, contextAdvancedMemoryQueryRequest, xHumanId, options).then((request) => request(this.axios, this.basePath));
    }
}

