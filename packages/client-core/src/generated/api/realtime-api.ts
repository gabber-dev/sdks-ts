/* tslint:disable */
/* eslint-disable */
/**
 * Gabber API Reference
 * The Gabber API is a set of APIs that allow you to interact with the Gabber platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AttachHumanRequest } from '../model';
// @ts-ignore
import type { BadRequest } from '../model';
// @ts-ignore
import type { GetRealtimeSessionMessages200Response } from '../model';
// @ts-ignore
import type { GetRealtimeSessionTimeline200Response } from '../model';
// @ts-ignore
import type { ListRealtimeSessions200Response } from '../model';
// @ts-ignore
import type { RealtimeSession } from '../model';
// @ts-ignore
import type { RealtimeSessionConfigUpdate } from '../model';
// @ts-ignore
import type { RealtimeSessionInitiateOutboundCallRequest } from '../model';
// @ts-ignore
import type { RealtimeSessionStartResponse } from '../model';
// @ts-ignore
import type { SpeakRequest } from '../model';
// @ts-ignore
import type { StartRealtimeSessionRequest } from '../model';
/**
 * RealtimeApi - axios parameter creator
 * @export
 */
export const RealtimeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Attaches a human to a RealtimeSession. This is useful for previously anonymous sessions, for example sessions created via a phone call.
         * @summary Attach a human to a RealtimeSession
         * @param {string} session The unique identifier of the RealtimeSession.
         * @param {AttachHumanRequest} attachHumanRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachHuman: async (session: string, attachHumanRequest: AttachHumanRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'session' is not null or undefined
            assertParamExists('attachHuman', 'session', session)
            // verify required parameter 'attachHumanRequest' is not null or undefined
            assertParamExists('attachHuman', 'attachHumanRequest', attachHumanRequest)
            const localVarPath = `/v1/realtime/session/{session}/attach_human`
                .replace(`{${"session"}}`, encodeURIComponent(String(session)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(attachHumanRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * End the RealtimeSession with the given identifier. 
         * @summary End a RealtimeSession.
         * @param {string} session The unique identifier of the RealtimeSession.
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endRealtimeSession: async (session: string, xHumanId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'session' is not null or undefined
            assertParamExists('endRealtimeSession', 'session', session)
            const localVarPath = `/v1/realtime/{session}/end`
                .replace(`{${"session"}}`, encodeURIComponent(String(session)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xHumanId != null) {
                localVarHeaderParameter['x-human-id'] = String(xHumanId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * End the RealtimeSession with the given identifier. 
         * @summary Get a RealtimeSession.
         * @param {string} session The unique identifier of the RealtimeSession.
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRealtimeSession: async (session: string, xHumanId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'session' is not null or undefined
            assertParamExists('getRealtimeSession', 'session', session)
            const localVarPath = `/v1/realtime/{session}`
                .replace(`{${"session"}}`, encodeURIComponent(String(session)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xHumanId != null) {
                localVarHeaderParameter['x-human-id'] = String(xHumanId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all ContextMessages associated with the given RealtimeSession. 
         * @summary Get a RealtimeSession messages.
         * @param {string} session The unique identifier of the RealtimeSession.
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRealtimeSessionMessages: async (session: string, xHumanId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'session' is not null or undefined
            assertParamExists('getRealtimeSessionMessages', 'session', session)
            const localVarPath = `/v1/realtime/{session}/messages`
                .replace(`{${"session"}}`, encodeURIComponent(String(session)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xHumanId != null) {
                localVarHeaderParameter['x-human-id'] = String(xHumanId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the timeline of the RealtimeSession with the given identifier. 
         * @summary Get a RealtimeSession timeline.
         * @param {string} session The unique identifier of the RealtimeSession.
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRealtimeSessionTimeline: async (session: string, xHumanId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'session' is not null or undefined
            assertParamExists('getRealtimeSessionTimeline', 'session', session)
            const localVarPath = `/v1/realtime/{session}/timeline`
                .replace(`{${"session"}}`, encodeURIComponent(String(session)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xHumanId != null) {
                localVarHeaderParameter['x-human-id'] = String(xHumanId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Initiate an outbound call from a RealtimeSession. 
         * @summary Initiate an outbound call.
         * @param {string} session The unique identifier of the RealtimeSession.
         * @param {RealtimeSessionInitiateOutboundCallRequest} realtimeSessionInitiateOutboundCallRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateOutboundCall: async (session: string, realtimeSessionInitiateOutboundCallRequest: RealtimeSessionInitiateOutboundCallRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'session' is not null or undefined
            assertParamExists('initiateOutboundCall', 'session', session)
            // verify required parameter 'realtimeSessionInitiateOutboundCallRequest' is not null or undefined
            assertParamExists('initiateOutboundCall', 'realtimeSessionInitiateOutboundCallRequest', realtimeSessionInitiateOutboundCallRequest)
            const localVarPath = `/v1/realtime/{session}/outbound_call`
                .replace(`{${"session"}}`, encodeURIComponent(String(session)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(realtimeSessionInitiateOutboundCallRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all Realtime Sessions. 
         * @summary List Realtime Sessions.
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRealtimeSessions: async (xHumanId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/realtime/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xHumanId != null) {
                localVarHeaderParameter['x-human-id'] = String(xHumanId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * For a live session, force the agent to speak a given text.
         * @summary Speak
         * @param {string} session The unique identifier of the RealtimeSession.
         * @param {SpeakRequest} speakRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        speak: async (session: string, speakRequest: SpeakRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'session' is not null or undefined
            assertParamExists('speak', 'session', session)
            // verify required parameter 'speakRequest' is not null or undefined
            assertParamExists('speak', 'speakRequest', speakRequest)
            const localVarPath = `/v1/realtime/{session}/speak`
                .replace(`{${"session"}}`, encodeURIComponent(String(session)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(speakRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Start a new RealtimeSession with the given configuration. 
         * @summary Start a new RealtimeSession.
         * @param {StartRealtimeSessionRequest} startRealtimeSessionRequest 
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startRealtimeSession: async (startRealtimeSessionRequest: StartRealtimeSessionRequest, xHumanId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startRealtimeSessionRequest' is not null or undefined
            assertParamExists('startRealtimeSession', 'startRealtimeSessionRequest', startRealtimeSessionRequest)
            const localVarPath = `/v1/realtime/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xHumanId != null) {
                localVarHeaderParameter['x-human-id'] = String(xHumanId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(startRealtimeSessionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the RealtimeSession with the given identifier. 
         * @summary Update a RealtimeSession.
         * @param {string} session The unique identifier of the RealtimeSession.
         * @param {RealtimeSessionConfigUpdate} realtimeSessionConfigUpdate 
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRealtimeSession: async (session: string, realtimeSessionConfigUpdate: RealtimeSessionConfigUpdate, xHumanId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'session' is not null or undefined
            assertParamExists('updateRealtimeSession', 'session', session)
            // verify required parameter 'realtimeSessionConfigUpdate' is not null or undefined
            assertParamExists('updateRealtimeSession', 'realtimeSessionConfigUpdate', realtimeSessionConfigUpdate)
            const localVarPath = `/v1/realtime/{session}/update`
                .replace(`{${"session"}}`, encodeURIComponent(String(session)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xHumanId != null) {
                localVarHeaderParameter['x-human-id'] = String(xHumanId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(realtimeSessionConfigUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RealtimeApi - functional programming interface
 * @export
 */
export const RealtimeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RealtimeApiAxiosParamCreator(configuration)
    return {
        /**
         * Attaches a human to a RealtimeSession. This is useful for previously anonymous sessions, for example sessions created via a phone call.
         * @summary Attach a human to a RealtimeSession
         * @param {string} session The unique identifier of the RealtimeSession.
         * @param {AttachHumanRequest} attachHumanRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async attachHuman(session: string, attachHumanRequest: AttachHumanRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RealtimeSession>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.attachHuman(session, attachHumanRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RealtimeApi.attachHuman']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * End the RealtimeSession with the given identifier. 
         * @summary End a RealtimeSession.
         * @param {string} session The unique identifier of the RealtimeSession.
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async endRealtimeSession(session: string, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RealtimeSession>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.endRealtimeSession(session, xHumanId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RealtimeApi.endRealtimeSession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * End the RealtimeSession with the given identifier. 
         * @summary Get a RealtimeSession.
         * @param {string} session The unique identifier of the RealtimeSession.
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRealtimeSession(session: string, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RealtimeSession>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRealtimeSession(session, xHumanId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RealtimeApi.getRealtimeSession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all ContextMessages associated with the given RealtimeSession. 
         * @summary Get a RealtimeSession messages.
         * @param {string} session The unique identifier of the RealtimeSession.
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRealtimeSessionMessages(session: string, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRealtimeSessionMessages200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRealtimeSessionMessages(session, xHumanId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RealtimeApi.getRealtimeSessionMessages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the timeline of the RealtimeSession with the given identifier. 
         * @summary Get a RealtimeSession timeline.
         * @param {string} session The unique identifier of the RealtimeSession.
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRealtimeSessionTimeline(session: string, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRealtimeSessionTimeline200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRealtimeSessionTimeline(session, xHumanId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RealtimeApi.getRealtimeSessionTimeline']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Initiate an outbound call from a RealtimeSession. 
         * @summary Initiate an outbound call.
         * @param {string} session The unique identifier of the RealtimeSession.
         * @param {RealtimeSessionInitiateOutboundCallRequest} realtimeSessionInitiateOutboundCallRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initiateOutboundCall(session: string, realtimeSessionInitiateOutboundCallRequest: RealtimeSessionInitiateOutboundCallRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RealtimeSession>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.initiateOutboundCall(session, realtimeSessionInitiateOutboundCallRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RealtimeApi.initiateOutboundCall']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all Realtime Sessions. 
         * @summary List Realtime Sessions.
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRealtimeSessions(xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListRealtimeSessions200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRealtimeSessions(xHumanId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RealtimeApi.listRealtimeSessions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * For a live session, force the agent to speak a given text.
         * @summary Speak
         * @param {string} session The unique identifier of the RealtimeSession.
         * @param {SpeakRequest} speakRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async speak(session: string, speakRequest: SpeakRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RealtimeSession>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.speak(session, speakRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RealtimeApi.speak']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Start a new RealtimeSession with the given configuration. 
         * @summary Start a new RealtimeSession.
         * @param {StartRealtimeSessionRequest} startRealtimeSessionRequest 
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startRealtimeSession(startRealtimeSessionRequest: StartRealtimeSessionRequest, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RealtimeSessionStartResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startRealtimeSession(startRealtimeSessionRequest, xHumanId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RealtimeApi.startRealtimeSession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update the RealtimeSession with the given identifier. 
         * @summary Update a RealtimeSession.
         * @param {string} session The unique identifier of the RealtimeSession.
         * @param {RealtimeSessionConfigUpdate} realtimeSessionConfigUpdate 
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRealtimeSession(session: string, realtimeSessionConfigUpdate: RealtimeSessionConfigUpdate, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RealtimeSession>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRealtimeSession(session, realtimeSessionConfigUpdate, xHumanId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RealtimeApi.updateRealtimeSession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RealtimeApi - factory interface
 * @export
 */
export const RealtimeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RealtimeApiFp(configuration)
    return {
        /**
         * Attaches a human to a RealtimeSession. This is useful for previously anonymous sessions, for example sessions created via a phone call.
         * @summary Attach a human to a RealtimeSession
         * @param {string} session The unique identifier of the RealtimeSession.
         * @param {AttachHumanRequest} attachHumanRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachHuman(session: string, attachHumanRequest: AttachHumanRequest, options?: RawAxiosRequestConfig): AxiosPromise<RealtimeSession> {
            return localVarFp.attachHuman(session, attachHumanRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * End the RealtimeSession with the given identifier. 
         * @summary End a RealtimeSession.
         * @param {string} session The unique identifier of the RealtimeSession.
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endRealtimeSession(session: string, xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<RealtimeSession> {
            return localVarFp.endRealtimeSession(session, xHumanId, options).then((request) => request(axios, basePath));
        },
        /**
         * End the RealtimeSession with the given identifier. 
         * @summary Get a RealtimeSession.
         * @param {string} session The unique identifier of the RealtimeSession.
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRealtimeSession(session: string, xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<RealtimeSession> {
            return localVarFp.getRealtimeSession(session, xHumanId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all ContextMessages associated with the given RealtimeSession. 
         * @summary Get a RealtimeSession messages.
         * @param {string} session The unique identifier of the RealtimeSession.
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRealtimeSessionMessages(session: string, xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetRealtimeSessionMessages200Response> {
            return localVarFp.getRealtimeSessionMessages(session, xHumanId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the timeline of the RealtimeSession with the given identifier. 
         * @summary Get a RealtimeSession timeline.
         * @param {string} session The unique identifier of the RealtimeSession.
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRealtimeSessionTimeline(session: string, xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetRealtimeSessionTimeline200Response> {
            return localVarFp.getRealtimeSessionTimeline(session, xHumanId, options).then((request) => request(axios, basePath));
        },
        /**
         * Initiate an outbound call from a RealtimeSession. 
         * @summary Initiate an outbound call.
         * @param {string} session The unique identifier of the RealtimeSession.
         * @param {RealtimeSessionInitiateOutboundCallRequest} realtimeSessionInitiateOutboundCallRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateOutboundCall(session: string, realtimeSessionInitiateOutboundCallRequest: RealtimeSessionInitiateOutboundCallRequest, options?: RawAxiosRequestConfig): AxiosPromise<RealtimeSession> {
            return localVarFp.initiateOutboundCall(session, realtimeSessionInitiateOutboundCallRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List all Realtime Sessions. 
         * @summary List Realtime Sessions.
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRealtimeSessions(xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<ListRealtimeSessions200Response> {
            return localVarFp.listRealtimeSessions(xHumanId, options).then((request) => request(axios, basePath));
        },
        /**
         * For a live session, force the agent to speak a given text.
         * @summary Speak
         * @param {string} session The unique identifier of the RealtimeSession.
         * @param {SpeakRequest} speakRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        speak(session: string, speakRequest: SpeakRequest, options?: RawAxiosRequestConfig): AxiosPromise<RealtimeSession> {
            return localVarFp.speak(session, speakRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Start a new RealtimeSession with the given configuration. 
         * @summary Start a new RealtimeSession.
         * @param {StartRealtimeSessionRequest} startRealtimeSessionRequest 
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startRealtimeSession(startRealtimeSessionRequest: StartRealtimeSessionRequest, xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<RealtimeSessionStartResponse> {
            return localVarFp.startRealtimeSession(startRealtimeSessionRequest, xHumanId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the RealtimeSession with the given identifier. 
         * @summary Update a RealtimeSession.
         * @param {string} session The unique identifier of the RealtimeSession.
         * @param {RealtimeSessionConfigUpdate} realtimeSessionConfigUpdate 
         * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRealtimeSession(session: string, realtimeSessionConfigUpdate: RealtimeSessionConfigUpdate, xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<RealtimeSession> {
            return localVarFp.updateRealtimeSession(session, realtimeSessionConfigUpdate, xHumanId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RealtimeApi - object-oriented interface
 * @export
 * @class RealtimeApi
 * @extends {BaseAPI}
 */
export class RealtimeApi extends BaseAPI {
    /**
     * Attaches a human to a RealtimeSession. This is useful for previously anonymous sessions, for example sessions created via a phone call.
     * @summary Attach a human to a RealtimeSession
     * @param {string} session The unique identifier of the RealtimeSession.
     * @param {AttachHumanRequest} attachHumanRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealtimeApi
     */
    public attachHuman(session: string, attachHumanRequest: AttachHumanRequest, options?: RawAxiosRequestConfig) {
        return RealtimeApiFp(this.configuration).attachHuman(session, attachHumanRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * End the RealtimeSession with the given identifier. 
     * @summary End a RealtimeSession.
     * @param {string} session The unique identifier of the RealtimeSession.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealtimeApi
     */
    public endRealtimeSession(session: string, xHumanId?: string, options?: RawAxiosRequestConfig) {
        return RealtimeApiFp(this.configuration).endRealtimeSession(session, xHumanId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * End the RealtimeSession with the given identifier. 
     * @summary Get a RealtimeSession.
     * @param {string} session The unique identifier of the RealtimeSession.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealtimeApi
     */
    public getRealtimeSession(session: string, xHumanId?: string, options?: RawAxiosRequestConfig) {
        return RealtimeApiFp(this.configuration).getRealtimeSession(session, xHumanId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all ContextMessages associated with the given RealtimeSession. 
     * @summary Get a RealtimeSession messages.
     * @param {string} session The unique identifier of the RealtimeSession.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealtimeApi
     */
    public getRealtimeSessionMessages(session: string, xHumanId?: string, options?: RawAxiosRequestConfig) {
        return RealtimeApiFp(this.configuration).getRealtimeSessionMessages(session, xHumanId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the timeline of the RealtimeSession with the given identifier. 
     * @summary Get a RealtimeSession timeline.
     * @param {string} session The unique identifier of the RealtimeSession.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealtimeApi
     */
    public getRealtimeSessionTimeline(session: string, xHumanId?: string, options?: RawAxiosRequestConfig) {
        return RealtimeApiFp(this.configuration).getRealtimeSessionTimeline(session, xHumanId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Initiate an outbound call from a RealtimeSession. 
     * @summary Initiate an outbound call.
     * @param {string} session The unique identifier of the RealtimeSession.
     * @param {RealtimeSessionInitiateOutboundCallRequest} realtimeSessionInitiateOutboundCallRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealtimeApi
     */
    public initiateOutboundCall(session: string, realtimeSessionInitiateOutboundCallRequest: RealtimeSessionInitiateOutboundCallRequest, options?: RawAxiosRequestConfig) {
        return RealtimeApiFp(this.configuration).initiateOutboundCall(session, realtimeSessionInitiateOutboundCallRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all Realtime Sessions. 
     * @summary List Realtime Sessions.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealtimeApi
     */
    public listRealtimeSessions(xHumanId?: string, options?: RawAxiosRequestConfig) {
        return RealtimeApiFp(this.configuration).listRealtimeSessions(xHumanId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * For a live session, force the agent to speak a given text.
     * @summary Speak
     * @param {string} session The unique identifier of the RealtimeSession.
     * @param {SpeakRequest} speakRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealtimeApi
     */
    public speak(session: string, speakRequest: SpeakRequest, options?: RawAxiosRequestConfig) {
        return RealtimeApiFp(this.configuration).speak(session, speakRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Start a new RealtimeSession with the given configuration. 
     * @summary Start a new RealtimeSession.
     * @param {StartRealtimeSessionRequest} startRealtimeSessionRequest 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealtimeApi
     */
    public startRealtimeSession(startRealtimeSessionRequest: StartRealtimeSessionRequest, xHumanId?: string, options?: RawAxiosRequestConfig) {
        return RealtimeApiFp(this.configuration).startRealtimeSession(startRealtimeSessionRequest, xHumanId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the RealtimeSession with the given identifier. 
     * @summary Update a RealtimeSession.
     * @param {string} session The unique identifier of the RealtimeSession.
     * @param {RealtimeSessionConfigUpdate} realtimeSessionConfigUpdate 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealtimeApi
     */
    public updateRealtimeSession(session: string, realtimeSessionConfigUpdate: RealtimeSessionConfigUpdate, xHumanId?: string, options?: RawAxiosRequestConfig) {
        return RealtimeApiFp(this.configuration).updateRealtimeSession(session, realtimeSessionConfigUpdate, xHumanId, options).then((request) => request(this.axios, this.basePath));
    }
}

