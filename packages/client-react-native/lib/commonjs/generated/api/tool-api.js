"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToolApiFp = exports.ToolApiFactory = exports.ToolApiAxiosParamCreator = exports.ToolApi = void 0;
var _axios = _interopRequireDefault(require("axios"));
var _common = require("../common.js");
var _base = require("../base.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/* tslint:disable */
/* eslint-disable */
/**
 * Gabber API Reference
 * The Gabber API is a set of APIs that allow you to interact with the Gabber platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// Some imports not used depending on template conditions
// @ts-ignore

// @ts-ignore

// @ts-ignore

// @ts-ignore

// @ts-ignore

// @ts-ignore

// @ts-ignore

// @ts-ignore

/**
 * ToolApi - axios parameter creator
 * @export
 */
const ToolApiAxiosParamCreator = function (configuration) {
  return {
    /**
     * Create a tool definition
     * @summary Create a tool definition
     * @param {CreateToolDefinitionRequest} createToolDefinitionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createToolDefinition: async (createToolDefinitionRequest, options = {}) => {
      // verify required parameter 'createToolDefinitionRequest' is not null or undefined
      (0, _common.assertParamExists)('createToolDefinition', 'createToolDefinitionRequest', createToolDefinitionRequest);
      const localVarPath = `/v1/tool`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};

      // authentication ApiKeyAuth required
      await (0, _common.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
      localVarHeaderParameter['Content-Type'] = 'application/json';
      (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = (0, _common.serializeDataIfNeeded)(createToolDefinitionRequest, localVarRequestOptions, configuration);
      return {
        url: (0, _common.toPathString)(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Delete a tool definition
     * @summary Delete a tool definition
     * @param {string} tool 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteToolDefinition: async (tool, options = {}) => {
      // verify required parameter 'tool' is not null or undefined
      (0, _common.assertParamExists)('deleteToolDefinition', 'tool', tool);
      const localVarPath = `/v1/tool/{tool}`.replace(`{${"tool"}}`, encodeURIComponent(String(tool)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};

      // authentication ApiKeyAuth required
      await (0, _common.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
      (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: (0, _common.toPathString)(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Get a tool call result
     * @summary Get a tool call result
     * @param {string} call 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getToolCallResult: async (call, options = {}) => {
      // verify required parameter 'call' is not null or undefined
      (0, _common.assertParamExists)('getToolCallResult', 'call', call);
      const localVarPath = `/v1/tool/call/{call}/result`.replace(`{${"call"}}`, encodeURIComponent(String(call)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};

      // authentication ApiKeyAuth required
      await (0, _common.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
      (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: (0, _common.toPathString)(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Get a tool definition
     * @summary Get a tool definition
     * @param {string} tool 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getToolDefinition: async (tool, options = {}) => {
      // verify required parameter 'tool' is not null or undefined
      (0, _common.assertParamExists)('getToolDefinition', 'tool', tool);
      const localVarPath = `/v1/tool/{tool}`.replace(`{${"tool"}}`, encodeURIComponent(String(tool)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};

      // authentication ApiKeyAuth required
      await (0, _common.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
      (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: (0, _common.toPathString)(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * List tools
     * @summary List tools
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listToolDefinitions: async (options = {}) => {
      const localVarPath = `/v1/tool/list`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};

      // authentication ApiKeyAuth required
      await (0, _common.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
      (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: (0, _common.toPathString)(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Update a tool definition
     * @summary Update a tool definition
     * @param {string} tool 
     * @param {CreateToolDefinitionRequest} createToolDefinitionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateToolDefinition: async (tool, createToolDefinitionRequest, options = {}) => {
      // verify required parameter 'tool' is not null or undefined
      (0, _common.assertParamExists)('updateToolDefinition', 'tool', tool);
      // verify required parameter 'createToolDefinitionRequest' is not null or undefined
      (0, _common.assertParamExists)('updateToolDefinition', 'createToolDefinitionRequest', createToolDefinitionRequest);
      const localVarPath = `/v1/tool/{tool}`.replace(`{${"tool"}}`, encodeURIComponent(String(tool)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};

      // authentication ApiKeyAuth required
      await (0, _common.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
      localVarHeaderParameter['Content-Type'] = 'application/json';
      (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = (0, _common.serializeDataIfNeeded)(createToolDefinitionRequest, localVarRequestOptions, configuration);
      return {
        url: (0, _common.toPathString)(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * ToolApi - functional programming interface
 * @export
 */
exports.ToolApiAxiosParamCreator = ToolApiAxiosParamCreator;
const ToolApiFp = function (configuration) {
  const localVarAxiosParamCreator = ToolApiAxiosParamCreator(configuration);
  return {
    /**
     * Create a tool definition
     * @summary Create a tool definition
     * @param {CreateToolDefinitionRequest} createToolDefinitionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createToolDefinition(createToolDefinitionRequest, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createToolDefinition(createToolDefinitionRequest, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = _base.operationServerMap['ToolApi.createToolDefinition']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) => (0, _common.createRequestFunction)(localVarAxiosArgs, _axios.default, _base.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Delete a tool definition
     * @summary Delete a tool definition
     * @param {string} tool 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteToolDefinition(tool, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteToolDefinition(tool, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = _base.operationServerMap['ToolApi.deleteToolDefinition']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) => (0, _common.createRequestFunction)(localVarAxiosArgs, _axios.default, _base.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Get a tool call result
     * @summary Get a tool call result
     * @param {string} call 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getToolCallResult(call, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getToolCallResult(call, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = _base.operationServerMap['ToolApi.getToolCallResult']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) => (0, _common.createRequestFunction)(localVarAxiosArgs, _axios.default, _base.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Get a tool definition
     * @summary Get a tool definition
     * @param {string} tool 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getToolDefinition(tool, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getToolDefinition(tool, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = _base.operationServerMap['ToolApi.getToolDefinition']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) => (0, _common.createRequestFunction)(localVarAxiosArgs, _axios.default, _base.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * List tools
     * @summary List tools
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listToolDefinitions(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listToolDefinitions(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = _base.operationServerMap['ToolApi.listToolDefinitions']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) => (0, _common.createRequestFunction)(localVarAxiosArgs, _axios.default, _base.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Update a tool definition
     * @summary Update a tool definition
     * @param {string} tool 
     * @param {CreateToolDefinitionRequest} createToolDefinitionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateToolDefinition(tool, createToolDefinitionRequest, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateToolDefinition(tool, createToolDefinitionRequest, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = _base.operationServerMap['ToolApi.updateToolDefinition']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) => (0, _common.createRequestFunction)(localVarAxiosArgs, _axios.default, _base.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    }
  };
};

/**
 * ToolApi - factory interface
 * @export
 */
exports.ToolApiFp = ToolApiFp;
const ToolApiFactory = function (configuration, basePath, axios) {
  const localVarFp = ToolApiFp(configuration);
  return {
    /**
     * Create a tool definition
     * @summary Create a tool definition
     * @param {CreateToolDefinitionRequest} createToolDefinitionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createToolDefinition(createToolDefinitionRequest, options) {
      return localVarFp.createToolDefinition(createToolDefinitionRequest, options).then(request => request(axios, basePath));
    },
    /**
     * Delete a tool definition
     * @summary Delete a tool definition
     * @param {string} tool 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteToolDefinition(tool, options) {
      return localVarFp.deleteToolDefinition(tool, options).then(request => request(axios, basePath));
    },
    /**
     * Get a tool call result
     * @summary Get a tool call result
     * @param {string} call 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getToolCallResult(call, options) {
      return localVarFp.getToolCallResult(call, options).then(request => request(axios, basePath));
    },
    /**
     * Get a tool definition
     * @summary Get a tool definition
     * @param {string} tool 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getToolDefinition(tool, options) {
      return localVarFp.getToolDefinition(tool, options).then(request => request(axios, basePath));
    },
    /**
     * List tools
     * @summary List tools
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listToolDefinitions(options) {
      return localVarFp.listToolDefinitions(options).then(request => request(axios, basePath));
    },
    /**
     * Update a tool definition
     * @summary Update a tool definition
     * @param {string} tool 
     * @param {CreateToolDefinitionRequest} createToolDefinitionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateToolDefinition(tool, createToolDefinitionRequest, options) {
      return localVarFp.updateToolDefinition(tool, createToolDefinitionRequest, options).then(request => request(axios, basePath));
    }
  };
};

/**
 * ToolApi - object-oriented interface
 * @export
 * @class ToolApi
 * @extends {BaseAPI}
 */
exports.ToolApiFactory = ToolApiFactory;
class ToolApi extends _base.BaseAPI {
  /**
   * Create a tool definition
   * @summary Create a tool definition
   * @param {CreateToolDefinitionRequest} createToolDefinitionRequest 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolApi
   */
  createToolDefinition(createToolDefinitionRequest, options) {
    return ToolApiFp(this.configuration).createToolDefinition(createToolDefinitionRequest, options).then(request => request(this.axios, this.basePath));
  }

  /**
   * Delete a tool definition
   * @summary Delete a tool definition
   * @param {string} tool 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolApi
   */
  deleteToolDefinition(tool, options) {
    return ToolApiFp(this.configuration).deleteToolDefinition(tool, options).then(request => request(this.axios, this.basePath));
  }

  /**
   * Get a tool call result
   * @summary Get a tool call result
   * @param {string} call 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolApi
   */
  getToolCallResult(call, options) {
    return ToolApiFp(this.configuration).getToolCallResult(call, options).then(request => request(this.axios, this.basePath));
  }

  /**
   * Get a tool definition
   * @summary Get a tool definition
   * @param {string} tool 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolApi
   */
  getToolDefinition(tool, options) {
    return ToolApiFp(this.configuration).getToolDefinition(tool, options).then(request => request(this.axios, this.basePath));
  }

  /**
   * List tools
   * @summary List tools
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolApi
   */
  listToolDefinitions(options) {
    return ToolApiFp(this.configuration).listToolDefinitions(options).then(request => request(this.axios, this.basePath));
  }

  /**
   * Update a tool definition
   * @summary Update a tool definition
   * @param {string} tool 
   * @param {CreateToolDefinitionRequest} createToolDefinitionRequest 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolApi
   */
  updateToolDefinition(tool, createToolDefinitionRequest, options) {
    return ToolApiFp(this.configuration).updateToolDefinition(tool, createToolDefinitionRequest, options).then(request => request(this.axios, this.basePath));
  }
}
exports.ToolApi = ToolApi;
//# sourceMappingURL=tool-api.js.map