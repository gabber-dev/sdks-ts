"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PersonaApiFp = exports.PersonaApiFactory = exports.PersonaApiAxiosParamCreator = exports.PersonaApi = void 0;
var _axios = _interopRequireDefault(require("axios"));
var _common = require("../common.js");
var _base = require("../base.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/* tslint:disable */
/* eslint-disable */
/**
 * Gabber API Reference
 * The Gabber API is a set of APIs that allow you to interact with the Gabber platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// Some imports not used depending on template conditions
// @ts-ignore

// @ts-ignore

// @ts-ignore

// @ts-ignore

// @ts-ignore

// @ts-ignore

// @ts-ignore

// @ts-ignore

// @ts-ignore

/**
 * PersonaApi - axios parameter creator
 * @export
 */
const PersonaApiAxiosParamCreator = function (configuration) {
  return {
    /**
     * 
     * @summary Create a persona
     * @param {CreatePersonaRequest} createPersonaRequest 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPersona: async (createPersonaRequest, xHumanId, options = {}) => {
      // verify required parameter 'createPersonaRequest' is not null or undefined
      (0, _common.assertParamExists)('createPersona', 'createPersonaRequest', createPersonaRequest);
      const localVarPath = `/v1/persona`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};

      // authentication ApiKeyAuth required
      await (0, _common.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);
      localVarHeaderParameter['Content-Type'] = 'application/json';
      if (xHumanId != null) {
        localVarHeaderParameter['x-human-id'] = String(xHumanId);
      }
      (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = (0, _common.serializeDataIfNeeded)(createPersonaRequest, localVarRequestOptions, configuration);
      return {
        url: (0, _common.toPathString)(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Delete a persona
     * @param {string} personaId 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePersona: async (personaId, xHumanId, options = {}) => {
      // verify required parameter 'personaId' is not null or undefined
      (0, _common.assertParamExists)('deletePersona', 'personaId', personaId);
      const localVarPath = `/v1/persona/{persona_id}`.replace(`{${"persona_id"}}`, encodeURIComponent(String(personaId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};

      // authentication ApiKeyAuth required
      await (0, _common.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);
      if (xHumanId != null) {
        localVarHeaderParameter['x-human-id'] = String(xHumanId);
      }
      (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: (0, _common.toPathString)(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Get a persona
     * @param {string} personaId 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPersona: async (personaId, xHumanId, options = {}) => {
      // verify required parameter 'personaId' is not null or undefined
      (0, _common.assertParamExists)('getPersona', 'personaId', personaId);
      const localVarPath = `/v1/persona/{persona_id}`.replace(`{${"persona_id"}}`, encodeURIComponent(String(personaId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};

      // authentication ApiKeyAuth required
      await (0, _common.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);
      if (xHumanId != null) {
        localVarHeaderParameter['x-human-id'] = String(xHumanId);
      }
      (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: (0, _common.toPathString)(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Get a list of personas
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPersonas: async (xHumanId, options = {}) => {
      const localVarPath = `/v1/persona/list`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};

      // authentication ApiKeyAuth required
      await (0, _common.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);
      if (xHumanId != null) {
        localVarHeaderParameter['x-human-id'] = String(xHumanId);
      }
      (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: (0, _common.toPathString)(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Update a persona
     * @param {string} personaId 
     * @param {UpdatePersonaRequest} updatePersonaRequest 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePersona: async (personaId, updatePersonaRequest, xHumanId, options = {}) => {
      // verify required parameter 'personaId' is not null or undefined
      (0, _common.assertParamExists)('updatePersona', 'personaId', personaId);
      // verify required parameter 'updatePersonaRequest' is not null or undefined
      (0, _common.assertParamExists)('updatePersona', 'updatePersonaRequest', updatePersonaRequest);
      const localVarPath = `/v1/persona/{persona_id}`.replace(`{${"persona_id"}}`, encodeURIComponent(String(personaId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};

      // authentication ApiKeyAuth required
      await (0, _common.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);
      localVarHeaderParameter['Content-Type'] = 'application/json';
      if (xHumanId != null) {
        localVarHeaderParameter['x-human-id'] = String(xHumanId);
      }
      (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = (0, _common.serializeDataIfNeeded)(updatePersonaRequest, localVarRequestOptions, configuration);
      return {
        url: (0, _common.toPathString)(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * PersonaApi - functional programming interface
 * @export
 */
exports.PersonaApiAxiosParamCreator = PersonaApiAxiosParamCreator;
const PersonaApiFp = function (configuration) {
  const localVarAxiosParamCreator = PersonaApiAxiosParamCreator(configuration);
  return {
    /**
     * 
     * @summary Create a persona
     * @param {CreatePersonaRequest} createPersonaRequest 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPersona(createPersonaRequest, xHumanId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createPersona(createPersonaRequest, xHumanId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = _base.operationServerMap['PersonaApi.createPersona']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) => (0, _common.createRequestFunction)(localVarAxiosArgs, _axios.default, _base.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 
     * @summary Delete a persona
     * @param {string} personaId 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePersona(personaId, xHumanId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePersona(personaId, xHumanId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = _base.operationServerMap['PersonaApi.deletePersona']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) => (0, _common.createRequestFunction)(localVarAxiosArgs, _axios.default, _base.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 
     * @summary Get a persona
     * @param {string} personaId 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPersona(personaId, xHumanId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPersona(personaId, xHumanId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = _base.operationServerMap['PersonaApi.getPersona']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) => (0, _common.createRequestFunction)(localVarAxiosArgs, _axios.default, _base.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 
     * @summary Get a list of personas
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listPersonas(xHumanId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listPersonas(xHumanId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = _base.operationServerMap['PersonaApi.listPersonas']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) => (0, _common.createRequestFunction)(localVarAxiosArgs, _axios.default, _base.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 
     * @summary Update a persona
     * @param {string} personaId 
     * @param {UpdatePersonaRequest} updatePersonaRequest 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updatePersona(personaId, updatePersonaRequest, xHumanId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatePersona(personaId, updatePersonaRequest, xHumanId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = _base.operationServerMap['PersonaApi.updatePersona']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) => (0, _common.createRequestFunction)(localVarAxiosArgs, _axios.default, _base.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    }
  };
};

/**
 * PersonaApi - factory interface
 * @export
 */
exports.PersonaApiFp = PersonaApiFp;
const PersonaApiFactory = function (configuration, basePath, axios) {
  const localVarFp = PersonaApiFp(configuration);
  return {
    /**
     * 
     * @summary Create a persona
     * @param {CreatePersonaRequest} createPersonaRequest 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPersona(createPersonaRequest, xHumanId, options) {
      return localVarFp.createPersona(createPersonaRequest, xHumanId, options).then(request => request(axios, basePath));
    },
    /**
     * 
     * @summary Delete a persona
     * @param {string} personaId 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePersona(personaId, xHumanId, options) {
      return localVarFp.deletePersona(personaId, xHumanId, options).then(request => request(axios, basePath));
    },
    /**
     * 
     * @summary Get a persona
     * @param {string} personaId 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPersona(personaId, xHumanId, options) {
      return localVarFp.getPersona(personaId, xHumanId, options).then(request => request(axios, basePath));
    },
    /**
     * 
     * @summary Get a list of personas
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPersonas(xHumanId, options) {
      return localVarFp.listPersonas(xHumanId, options).then(request => request(axios, basePath));
    },
    /**
     * 
     * @summary Update a persona
     * @param {string} personaId 
     * @param {UpdatePersonaRequest} updatePersonaRequest 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePersona(personaId, updatePersonaRequest, xHumanId, options) {
      return localVarFp.updatePersona(personaId, updatePersonaRequest, xHumanId, options).then(request => request(axios, basePath));
    }
  };
};

/**
 * PersonaApi - object-oriented interface
 * @export
 * @class PersonaApi
 * @extends {BaseAPI}
 */
exports.PersonaApiFactory = PersonaApiFactory;
class PersonaApi extends _base.BaseAPI {
  /**
   * 
   * @summary Create a persona
   * @param {CreatePersonaRequest} createPersonaRequest 
   * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PersonaApi
   */
  createPersona(createPersonaRequest, xHumanId, options) {
    return PersonaApiFp(this.configuration).createPersona(createPersonaRequest, xHumanId, options).then(request => request(this.axios, this.basePath));
  }

  /**
   * 
   * @summary Delete a persona
   * @param {string} personaId 
   * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PersonaApi
   */
  deletePersona(personaId, xHumanId, options) {
    return PersonaApiFp(this.configuration).deletePersona(personaId, xHumanId, options).then(request => request(this.axios, this.basePath));
  }

  /**
   * 
   * @summary Get a persona
   * @param {string} personaId 
   * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PersonaApi
   */
  getPersona(personaId, xHumanId, options) {
    return PersonaApiFp(this.configuration).getPersona(personaId, xHumanId, options).then(request => request(this.axios, this.basePath));
  }

  /**
   * 
   * @summary Get a list of personas
   * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PersonaApi
   */
  listPersonas(xHumanId, options) {
    return PersonaApiFp(this.configuration).listPersonas(xHumanId, options).then(request => request(this.axios, this.basePath));
  }

  /**
   * 
   * @summary Update a persona
   * @param {string} personaId 
   * @param {UpdatePersonaRequest} updatePersonaRequest 
   * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PersonaApi
   */
  updatePersona(personaId, updatePersonaRequest, xHumanId, options) {
    return PersonaApiFp(this.configuration).updatePersona(personaId, updatePersonaRequest, xHumanId, options).then(request => request(this.axios, this.basePath));
  }
}
exports.PersonaApi = PersonaApi;
//# sourceMappingURL=persona-api.js.map