"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InferenceApiFp = exports.InferenceApiFactory = exports.InferenceApiAxiosParamCreator = exports.InferenceApi = void 0;
var _axios = _interopRequireDefault(require("axios"));
var _common = require("../common.js");
var _base = require("../base.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/* tslint:disable */
/* eslint-disable */
/**
 * Gabber API Reference
 * The Gabber API is a set of APIs that allow you to interact with the Gabber platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// Some imports not used depending on template conditions
// @ts-ignore

// @ts-ignore

// @ts-ignore

// @ts-ignore

// @ts-ignore

// @ts-ignore

/**
 * InferenceApi - axios parameter creator
 * @export
 */
const InferenceApiAxiosParamCreator = function (configuration) {
  return {
    /**
     * Given messages, generates LLM output text and optionally speech
     * @summary Chat Completions (+ Voice)
     * @param {ChatCompletionRequest} chatCompletionRequest 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chatCompletions: async (chatCompletionRequest, xHumanId, options = {}) => {
      // verify required parameter 'chatCompletionRequest' is not null or undefined
      (0, _common.assertParamExists)('chatCompletions', 'chatCompletionRequest', chatCompletionRequest);
      const localVarPath = `/v1/chat/completions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};

      // authentication ApiKeyAuth required
      await (0, _common.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);
      localVarHeaderParameter['Content-Type'] = 'application/json';
      if (xHumanId != null) {
        localVarHeaderParameter['x-human-id'] = String(xHumanId);
      }
      (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = (0, _common.serializeDataIfNeeded)(chatCompletionRequest, localVarRequestOptions, configuration);
      return {
        url: (0, _common.toPathString)(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * InferenceApi - functional programming interface
 * @export
 */
exports.InferenceApiAxiosParamCreator = InferenceApiAxiosParamCreator;
const InferenceApiFp = function (configuration) {
  const localVarAxiosParamCreator = InferenceApiAxiosParamCreator(configuration);
  return {
    /**
     * Given messages, generates LLM output text and optionally speech
     * @summary Chat Completions (+ Voice)
     * @param {ChatCompletionRequest} chatCompletionRequest 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async chatCompletions(chatCompletionRequest, xHumanId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.chatCompletions(chatCompletionRequest, xHumanId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = _base.operationServerMap['InferenceApi.chatCompletions']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) => (0, _common.createRequestFunction)(localVarAxiosArgs, _axios.default, _base.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    }
  };
};

/**
 * InferenceApi - factory interface
 * @export
 */
exports.InferenceApiFp = InferenceApiFp;
const InferenceApiFactory = function (configuration, basePath, axios) {
  const localVarFp = InferenceApiFp(configuration);
  return {
    /**
     * Given messages, generates LLM output text and optionally speech
     * @summary Chat Completions (+ Voice)
     * @param {ChatCompletionRequest} chatCompletionRequest 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chatCompletions(chatCompletionRequest, xHumanId, options) {
      return localVarFp.chatCompletions(chatCompletionRequest, xHumanId, options).then(request => request(axios, basePath));
    }
  };
};

/**
 * InferenceApi - object-oriented interface
 * @export
 * @class InferenceApi
 * @extends {BaseAPI}
 */
exports.InferenceApiFactory = InferenceApiFactory;
class InferenceApi extends _base.BaseAPI {
  /**
   * Given messages, generates LLM output text and optionally speech
   * @summary Chat Completions (+ Voice)
   * @param {ChatCompletionRequest} chatCompletionRequest 
   * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InferenceApi
   */
  chatCompletions(chatCompletionRequest, xHumanId, options) {
    return InferenceApiFp(this.configuration).chatCompletions(chatCompletionRequest, xHumanId, options).then(request => request(this.axios, this.basePath));
  }
}
exports.InferenceApi = InferenceApi;
//# sourceMappingURL=inference-api.js.map