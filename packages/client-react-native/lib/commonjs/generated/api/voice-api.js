"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VoiceApiFp = exports.VoiceApiFactory = exports.VoiceApiAxiosParamCreator = exports.VoiceApi = void 0;
var _axios = _interopRequireDefault(require("axios"));
var _common = require("../common.js");
var _base = require("../base.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/* tslint:disable */
/* eslint-disable */
/**
 * Gabber API Reference
 * The Gabber API is a set of APIs that allow you to interact with the Gabber platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// Some imports not used depending on template conditions
// @ts-ignore

// @ts-ignore

// @ts-ignore

// @ts-ignore

// @ts-ignore

// @ts-ignore

// @ts-ignore

// @ts-ignore

/**
 * VoiceApi - axios parameter creator
 * @export
 */
const VoiceApiAxiosParamCreator = function (configuration) {
  return {
    /**
     * Creates a new cloned voice based on the input audio file
     * @summary Clone a voice
     * @param {string} name Name of the new voice
     * @param {string} language Language of the voice (e.g., \\\&#39;en\\\&#39;, \\\&#39;es\\\&#39;, \\\&#39;fr\\\&#39;)
     * @param {File} file Audio file for voice cloning (MP3 format)
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cloneVoice: async (name, language, file, xHumanId, options = {}) => {
      // verify required parameter 'name' is not null or undefined
      (0, _common.assertParamExists)('cloneVoice', 'name', name);
      // verify required parameter 'language' is not null or undefined
      (0, _common.assertParamExists)('cloneVoice', 'language', language);
      // verify required parameter 'file' is not null or undefined
      (0, _common.assertParamExists)('cloneVoice', 'file', file);
      const localVarPath = `/v1/voice/clone`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      const localVarFormParams = new (configuration && configuration.formDataCtor || FormData)();

      // authentication ApiKeyAuth required
      await (0, _common.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);
      if (name !== undefined) {
        localVarFormParams.append('name', name);
      }
      if (language !== undefined) {
        localVarFormParams.append('language', language);
      }
      if (file !== undefined) {
        localVarFormParams.append('file', file);
      }
      localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
      if (xHumanId != null) {
        localVarHeaderParameter['x-human-id'] = String(xHumanId);
      }
      (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = localVarFormParams;
      return {
        url: (0, _common.toPathString)(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Delete a voice
     * @param {string} voiceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVoice: async (voiceId, options = {}) => {
      // verify required parameter 'voiceId' is not null or undefined
      (0, _common.assertParamExists)('deleteVoice', 'voiceId', voiceId);
      const localVarPath = `/v1/voice/{voice_id}`.replace(`{${"voice_id"}}`, encodeURIComponent(String(voiceId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};

      // authentication ApiKeyAuth required
      await (0, _common.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);
      (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: (0, _common.toPathString)(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Generates speech from input text and specified voice
     * @summary Generate voice
     * @param {GenerateVoiceRequest} generateVoiceRequest 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateVoice: async (generateVoiceRequest, xHumanId, options = {}) => {
      // verify required parameter 'generateVoiceRequest' is not null or undefined
      (0, _common.assertParamExists)('generateVoice', 'generateVoiceRequest', generateVoiceRequest);
      const localVarPath = `/v1/voice/generate`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};

      // authentication ApiKeyAuth required
      await (0, _common.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);
      localVarHeaderParameter['Content-Type'] = 'application/json';
      if (xHumanId != null) {
        localVarHeaderParameter['x-human-id'] = String(xHumanId);
      }
      (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = (0, _common.serializeDataIfNeeded)(generateVoiceRequest, localVarRequestOptions, configuration);
      return {
        url: (0, _common.toPathString)(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Get a voice
     * @param {string} voiceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVoice: async (voiceId, options = {}) => {
      // verify required parameter 'voiceId' is not null or undefined
      (0, _common.assertParamExists)('getVoice', 'voiceId', voiceId);
      const localVarPath = `/v1/voice/{voice_id}`.replace(`{${"voice_id"}}`, encodeURIComponent(String(voiceId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};

      // authentication ApiKeyAuth required
      await (0, _common.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);
      (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: (0, _common.toPathString)(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Get a list of voices
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVoices: async (xHumanId, options = {}) => {
      const localVarPath = `/v1/voice/list`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};

      // authentication ApiKeyAuth required
      await (0, _common.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);
      if (xHumanId != null) {
        localVarHeaderParameter['x-human-id'] = String(xHumanId);
      }
      (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: (0, _common.toPathString)(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Updates a voice based on the input request data
     * @summary Update a voice
     * @param {string} voiceId 
     * @param {UpdateVoiceRequest} updateVoiceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVoice: async (voiceId, updateVoiceRequest, options = {}) => {
      // verify required parameter 'voiceId' is not null or undefined
      (0, _common.assertParamExists)('updateVoice', 'voiceId', voiceId);
      // verify required parameter 'updateVoiceRequest' is not null or undefined
      (0, _common.assertParamExists)('updateVoice', 'updateVoiceRequest', updateVoiceRequest);
      const localVarPath = `/v1/voice/{voice_id}`.replace(`{${"voice_id"}}`, encodeURIComponent(String(voiceId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, _common.DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};

      // authentication ApiKeyAuth required
      await (0, _common.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await (0, _common.setBearerAuthToObject)(localVarHeaderParameter, configuration);
      localVarHeaderParameter['Content-Type'] = 'application/json';
      (0, _common.setSearchParams)(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = (0, _common.serializeDataIfNeeded)(updateVoiceRequest, localVarRequestOptions, configuration);
      return {
        url: (0, _common.toPathString)(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * VoiceApi - functional programming interface
 * @export
 */
exports.VoiceApiAxiosParamCreator = VoiceApiAxiosParamCreator;
const VoiceApiFp = function (configuration) {
  const localVarAxiosParamCreator = VoiceApiAxiosParamCreator(configuration);
  return {
    /**
     * Creates a new cloned voice based on the input audio file
     * @summary Clone a voice
     * @param {string} name Name of the new voice
     * @param {string} language Language of the voice (e.g., \\\&#39;en\\\&#39;, \\\&#39;es\\\&#39;, \\\&#39;fr\\\&#39;)
     * @param {File} file Audio file for voice cloning (MP3 format)
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async cloneVoice(name, language, file, xHumanId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.cloneVoice(name, language, file, xHumanId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = _base.operationServerMap['VoiceApi.cloneVoice']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) => (0, _common.createRequestFunction)(localVarAxiosArgs, _axios.default, _base.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 
     * @summary Delete a voice
     * @param {string} voiceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteVoice(voiceId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVoice(voiceId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = _base.operationServerMap['VoiceApi.deleteVoice']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) => (0, _common.createRequestFunction)(localVarAxiosArgs, _axios.default, _base.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Generates speech from input text and specified voice
     * @summary Generate voice
     * @param {GenerateVoiceRequest} generateVoiceRequest 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async generateVoice(generateVoiceRequest, xHumanId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.generateVoice(generateVoiceRequest, xHumanId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = _base.operationServerMap['VoiceApi.generateVoice']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) => (0, _common.createRequestFunction)(localVarAxiosArgs, _axios.default, _base.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 
     * @summary Get a voice
     * @param {string} voiceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVoice(voiceId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getVoice(voiceId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = _base.operationServerMap['VoiceApi.getVoice']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) => (0, _common.createRequestFunction)(localVarAxiosArgs, _axios.default, _base.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 
     * @summary Get a list of voices
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listVoices(xHumanId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listVoices(xHumanId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = _base.operationServerMap['VoiceApi.listVoices']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) => (0, _common.createRequestFunction)(localVarAxiosArgs, _axios.default, _base.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Updates a voice based on the input request data
     * @summary Update a voice
     * @param {string} voiceId 
     * @param {UpdateVoiceRequest} updateVoiceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateVoice(voiceId, updateVoiceRequest, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateVoice(voiceId, updateVoiceRequest, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = _base.operationServerMap['VoiceApi.updateVoice']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) => (0, _common.createRequestFunction)(localVarAxiosArgs, _axios.default, _base.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    }
  };
};

/**
 * VoiceApi - factory interface
 * @export
 */
exports.VoiceApiFp = VoiceApiFp;
const VoiceApiFactory = function (configuration, basePath, axios) {
  const localVarFp = VoiceApiFp(configuration);
  return {
    /**
     * Creates a new cloned voice based on the input audio file
     * @summary Clone a voice
     * @param {string} name Name of the new voice
     * @param {string} language Language of the voice (e.g., \\\&#39;en\\\&#39;, \\\&#39;es\\\&#39;, \\\&#39;fr\\\&#39;)
     * @param {File} file Audio file for voice cloning (MP3 format)
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cloneVoice(name, language, file, xHumanId, options) {
      return localVarFp.cloneVoice(name, language, file, xHumanId, options).then(request => request(axios, basePath));
    },
    /**
     * 
     * @summary Delete a voice
     * @param {string} voiceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVoice(voiceId, options) {
      return localVarFp.deleteVoice(voiceId, options).then(request => request(axios, basePath));
    },
    /**
     * Generates speech from input text and specified voice
     * @summary Generate voice
     * @param {GenerateVoiceRequest} generateVoiceRequest 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateVoice(generateVoiceRequest, xHumanId, options) {
      return localVarFp.generateVoice(generateVoiceRequest, xHumanId, options).then(request => request(axios, basePath));
    },
    /**
     * 
     * @summary Get a voice
     * @param {string} voiceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVoice(voiceId, options) {
      return localVarFp.getVoice(voiceId, options).then(request => request(axios, basePath));
    },
    /**
     * 
     * @summary Get a list of voices
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVoices(xHumanId, options) {
      return localVarFp.listVoices(xHumanId, options).then(request => request(axios, basePath));
    },
    /**
     * Updates a voice based on the input request data
     * @summary Update a voice
     * @param {string} voiceId 
     * @param {UpdateVoiceRequest} updateVoiceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVoice(voiceId, updateVoiceRequest, options) {
      return localVarFp.updateVoice(voiceId, updateVoiceRequest, options).then(request => request(axios, basePath));
    }
  };
};

/**
 * VoiceApi - object-oriented interface
 * @export
 * @class VoiceApi
 * @extends {BaseAPI}
 */
exports.VoiceApiFactory = VoiceApiFactory;
class VoiceApi extends _base.BaseAPI {
  /**
   * Creates a new cloned voice based on the input audio file
   * @summary Clone a voice
   * @param {string} name Name of the new voice
   * @param {string} language Language of the voice (e.g., \\\&#39;en\\\&#39;, \\\&#39;es\\\&#39;, \\\&#39;fr\\\&#39;)
   * @param {File} file Audio file for voice cloning (MP3 format)
   * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VoiceApi
   */
  cloneVoice(name, language, file, xHumanId, options) {
    return VoiceApiFp(this.configuration).cloneVoice(name, language, file, xHumanId, options).then(request => request(this.axios, this.basePath));
  }

  /**
   * 
   * @summary Delete a voice
   * @param {string} voiceId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VoiceApi
   */
  deleteVoice(voiceId, options) {
    return VoiceApiFp(this.configuration).deleteVoice(voiceId, options).then(request => request(this.axios, this.basePath));
  }

  /**
   * Generates speech from input text and specified voice
   * @summary Generate voice
   * @param {GenerateVoiceRequest} generateVoiceRequest 
   * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VoiceApi
   */
  generateVoice(generateVoiceRequest, xHumanId, options) {
    return VoiceApiFp(this.configuration).generateVoice(generateVoiceRequest, xHumanId, options).then(request => request(this.axios, this.basePath));
  }

  /**
   * 
   * @summary Get a voice
   * @param {string} voiceId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VoiceApi
   */
  getVoice(voiceId, options) {
    return VoiceApiFp(this.configuration).getVoice(voiceId, options).then(request => request(this.axios, this.basePath));
  }

  /**
   * 
   * @summary Get a list of voices
   * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VoiceApi
   */
  listVoices(xHumanId, options) {
    return VoiceApiFp(this.configuration).listVoices(xHumanId, options).then(request => request(this.axios, this.basePath));
  }

  /**
   * Updates a voice based on the input request data
   * @summary Update a voice
   * @param {string} voiceId 
   * @param {UpdateVoiceRequest} updateVoiceRequest 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VoiceApi
   */
  updateVoice(voiceId, updateVoiceRequest, options) {
    return VoiceApiFp(this.configuration).updateVoice(voiceId, updateVoiceRequest, options).then(request => request(this.axios, this.basePath));
  }
}
exports.VoiceApi = VoiceApi;
//# sourceMappingURL=voice-api.js.map