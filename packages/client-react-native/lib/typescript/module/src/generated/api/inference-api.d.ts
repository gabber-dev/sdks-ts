/**
 * Gabber API Reference
 * The Gabber API is a set of APIs that allow you to interact with the Gabber platform.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { ChatCompletionRequest } from '../model';
import type { ChatCompletionResponse } from '../model';
/**
 * InferenceApi - axios parameter creator
 * @export
 */
export declare const InferenceApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Given messages, generates LLM output text and optionally speech
     * @summary Chat Completions (+ Voice)
     * @param {ChatCompletionRequest} chatCompletionRequest
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chatCompletions: (chatCompletionRequest: ChatCompletionRequest, xHumanId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * InferenceApi - functional programming interface
 * @export
 */
export declare const InferenceApiFp: (configuration?: Configuration) => {
    /**
     * Given messages, generates LLM output text and optionally speech
     * @summary Chat Completions (+ Voice)
     * @param {ChatCompletionRequest} chatCompletionRequest
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chatCompletions(chatCompletionRequest: ChatCompletionRequest, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatCompletionResponse>>;
};
/**
 * InferenceApi - factory interface
 * @export
 */
export declare const InferenceApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Given messages, generates LLM output text and optionally speech
     * @summary Chat Completions (+ Voice)
     * @param {ChatCompletionRequest} chatCompletionRequest
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chatCompletions(chatCompletionRequest: ChatCompletionRequest, xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<ChatCompletionResponse>;
};
/**
 * InferenceApi - object-oriented interface
 * @export
 * @class InferenceApi
 * @extends {BaseAPI}
 */
export declare class InferenceApi extends BaseAPI {
    /**
     * Given messages, generates LLM output text and optionally speech
     * @summary Chat Completions (+ Voice)
     * @param {ChatCompletionRequest} chatCompletionRequest
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InferenceApi
     */
    chatCompletions(chatCompletionRequest: ChatCompletionRequest, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ChatCompletionResponse, any>>;
}
//# sourceMappingURL=inference-api.d.ts.map