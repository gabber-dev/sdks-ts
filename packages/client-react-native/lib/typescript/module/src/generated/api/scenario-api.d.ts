/**
 * Gabber API Reference
 * The Gabber API is a set of APIs that allow you to interact with the Gabber platform.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { CreateScenarioRequest } from '../model';
import type { DeleteScenario200Response } from '../model';
import type { ListScenarios200Response } from '../model';
import type { Scenario } from '../model';
import type { UpdateScenarioRequest } from '../model';
/**
 * ScenarioApi - axios parameter creator
 * @export
 */
export declare const ScenarioApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a scenario
     * @param {CreateScenarioRequest} createScenarioRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createScenario: (createScenarioRequest: CreateScenarioRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a scenario
     * @param {string} scenarioId
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteScenario: (scenarioId: string, xHumanId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a scenario
     * @param {string} scenarioId
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScenario: (scenarioId: string, xHumanId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a list of scenarios
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listScenarios: (xHumanId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a scenario
     * @param {string} scenarioId
     * @param {UpdateScenarioRequest} updateScenarioRequest
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateScenario: (scenarioId: string, updateScenarioRequest: UpdateScenarioRequest, xHumanId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ScenarioApi - functional programming interface
 * @export
 */
export declare const ScenarioApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a scenario
     * @param {CreateScenarioRequest} createScenarioRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createScenario(createScenarioRequest: CreateScenarioRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Scenario>>;
    /**
     *
     * @summary Delete a scenario
     * @param {string} scenarioId
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteScenario(scenarioId: string, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteScenario200Response>>;
    /**
     *
     * @summary Get a scenario
     * @param {string} scenarioId
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScenario(scenarioId: string, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Scenario>>;
    /**
     *
     * @summary Get a list of scenarios
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listScenarios(xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListScenarios200Response>>;
    /**
     *
     * @summary Update a scenario
     * @param {string} scenarioId
     * @param {UpdateScenarioRequest} updateScenarioRequest
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateScenario(scenarioId: string, updateScenarioRequest: UpdateScenarioRequest, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Scenario>>;
};
/**
 * ScenarioApi - factory interface
 * @export
 */
export declare const ScenarioApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create a scenario
     * @param {CreateScenarioRequest} createScenarioRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createScenario(createScenarioRequest: CreateScenarioRequest, options?: RawAxiosRequestConfig): AxiosPromise<Scenario>;
    /**
     *
     * @summary Delete a scenario
     * @param {string} scenarioId
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteScenario(scenarioId: string, xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<DeleteScenario200Response>;
    /**
     *
     * @summary Get a scenario
     * @param {string} scenarioId
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScenario(scenarioId: string, xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Scenario>;
    /**
     *
     * @summary Get a list of scenarios
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listScenarios(xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<ListScenarios200Response>;
    /**
     *
     * @summary Update a scenario
     * @param {string} scenarioId
     * @param {UpdateScenarioRequest} updateScenarioRequest
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateScenario(scenarioId: string, updateScenarioRequest: UpdateScenarioRequest, xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Scenario>;
};
/**
 * ScenarioApi - object-oriented interface
 * @export
 * @class ScenarioApi
 * @extends {BaseAPI}
 */
export declare class ScenarioApi extends BaseAPI {
    /**
     *
     * @summary Create a scenario
     * @param {CreateScenarioRequest} createScenarioRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScenarioApi
     */
    createScenario(createScenarioRequest: CreateScenarioRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Scenario, any>>;
    /**
     *
     * @summary Delete a scenario
     * @param {string} scenarioId
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScenarioApi
     */
    deleteScenario(scenarioId: string, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteScenario200Response, any>>;
    /**
     *
     * @summary Get a scenario
     * @param {string} scenarioId
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScenarioApi
     */
    getScenario(scenarioId: string, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Scenario, any>>;
    /**
     *
     * @summary Get a list of scenarios
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScenarioApi
     */
    listScenarios(xHumanId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ListScenarios200Response, any>>;
    /**
     *
     * @summary Update a scenario
     * @param {string} scenarioId
     * @param {UpdateScenarioRequest} updateScenarioRequest
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScenarioApi
     */
    updateScenario(scenarioId: string, updateScenarioRequest: UpdateScenarioRequest, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Scenario, any>>;
}
//# sourceMappingURL=scenario-api.d.ts.map