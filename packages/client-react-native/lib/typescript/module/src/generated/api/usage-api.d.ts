/**
 * Gabber API Reference
 * The Gabber API is a set of APIs that allow you to interact with the Gabber platform.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { CreateUsageToken200Response } from '../model';
import type { UpdateUsageLimitsRequest } from '../model';
import type { UsageLimitsInner } from '../model';
import type { UsageTokenRequest } from '../model';
/**
 * UsageApi - axios parameter creator
 * @export
 */
export declare const UsageApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Requests a token for a human
     * @summary Create a new usage token
     * @param {UsageTokenRequest} usageTokenRequest
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUsageToken: (usageTokenRequest: UsageTokenRequest, xHumanId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets the usage limits of a token
     * @summary Get usage limits
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsageLimits: (xHumanId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the usage limits of a human
     * @summary Update limits on a usage token
     * @param {UpdateUsageLimitsRequest} updateUsageLimitsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUsageToken: (updateUsageLimitsRequest: UpdateUsageLimitsRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UsageApi - functional programming interface
 * @export
 */
export declare const UsageApiFp: (configuration?: Configuration) => {
    /**
     * Requests a token for a human
     * @summary Create a new usage token
     * @param {UsageTokenRequest} usageTokenRequest
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUsageToken(usageTokenRequest: UsageTokenRequest, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUsageToken200Response>>;
    /**
     * Gets the usage limits of a token
     * @summary Get usage limits
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsageLimits(xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UsageLimitsInner>>>;
    /**
     * Updates the usage limits of a human
     * @summary Update limits on a usage token
     * @param {UpdateUsageLimitsRequest} updateUsageLimitsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUsageToken(updateUsageLimitsRequest: UpdateUsageLimitsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{
        [key: string]: any;
    }>>;
};
/**
 * UsageApi - factory interface
 * @export
 */
export declare const UsageApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Requests a token for a human
     * @summary Create a new usage token
     * @param {UsageTokenRequest} usageTokenRequest
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUsageToken(usageTokenRequest: UsageTokenRequest, xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<CreateUsageToken200Response>;
    /**
     * Gets the usage limits of a token
     * @summary Get usage limits
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsageLimits(xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<UsageLimitsInner>>;
    /**
     * Updates the usage limits of a human
     * @summary Update limits on a usage token
     * @param {UpdateUsageLimitsRequest} updateUsageLimitsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUsageToken(updateUsageLimitsRequest: UpdateUsageLimitsRequest, options?: RawAxiosRequestConfig): AxiosPromise<{
        [key: string]: any;
    }>;
};
/**
 * UsageApi - object-oriented interface
 * @export
 * @class UsageApi
 * @extends {BaseAPI}
 */
export declare class UsageApi extends BaseAPI {
    /**
     * Requests a token for a human
     * @summary Create a new usage token
     * @param {UsageTokenRequest} usageTokenRequest
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsageApi
     */
    createUsageToken(usageTokenRequest: UsageTokenRequest, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateUsageToken200Response, any>>;
    /**
     * Gets the usage limits of a token
     * @summary Get usage limits
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsageApi
     */
    getUsageLimits(xHumanId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UsageLimitsInner[], any>>;
    /**
     * Updates the usage limits of a human
     * @summary Update limits on a usage token
     * @param {UpdateUsageLimitsRequest} updateUsageLimitsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsageApi
     */
    updateUsageToken(updateUsageLimitsRequest: UpdateUsageLimitsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<{
        [key: string]: any;
    }, any>>;
}
//# sourceMappingURL=usage-api.d.ts.map