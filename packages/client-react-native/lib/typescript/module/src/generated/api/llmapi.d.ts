/**
 * Gabber API Reference
 * The Gabber API is a set of APIs that allow you to interact with the Gabber platform.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { Context } from '../model';
import type { ContextCreateRequest } from '../model';
import type { ContextMessage } from '../model';
import type { ContextMessageCreateParams } from '../model';
import type { LLM } from '../model';
import type { ListContextMessages200Response } from '../model';
import type { ListLLMs200Response } from '../model';
/**
 * LLMApi - axios parameter creator
 * @export
 */
export declare const LLMApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a new Context with the given configuration.
     * @summary Create a new Context.
     * @param {ContextCreateRequest} contextCreateRequest
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createContext: (contextCreateRequest: ContextCreateRequest, xHumanId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new ContextMessage with the given configuration.
     * @summary Create a new ContextMessage.
     * @param {string} context The unique identifier of the Context.
     * @param {ContextMessageCreateParams} contextMessageCreateParams
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createContextMessage: (context: string, contextMessageCreateParams: ContextMessageCreateParams, xHumanId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve the Context with the given identifier.
     * @summary Retrieve a Context.
     * @param {string} context The unique identifier of the Context.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContext: (context: string, xHumanId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve the ContextMessage with the given identifier.
     * @summary Retrieve a ContextMessage.
     * @param {string} context The unique identifier of the Context.
     * @param {string} message The unique identifier of the ContextMessage.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContextMessage: (context: string, message: string, xHumanId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a list of llms
     * @param {string} llm
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLLM: (llm: string, xHumanId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all ContextMessages associated with the given Context.
     * @summary List ContextMessages.
     * @param {string} context The unique identifier of the Context.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {Array<string>} [messageIds] A comma-separated list of message IDs to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listContextMessages: (context: string, xHumanId?: string, messageIds?: Array<string>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a list of llms
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listLLMs: (xHumanId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * LLMApi - functional programming interface
 * @export
 */
export declare const LLMApiFp: (configuration?: Configuration) => {
    /**
     * Create a new Context with the given configuration.
     * @summary Create a new Context.
     * @param {ContextCreateRequest} contextCreateRequest
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createContext(contextCreateRequest: ContextCreateRequest, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Context>>;
    /**
     * Create a new ContextMessage with the given configuration.
     * @summary Create a new ContextMessage.
     * @param {string} context The unique identifier of the Context.
     * @param {ContextMessageCreateParams} contextMessageCreateParams
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createContextMessage(context: string, contextMessageCreateParams: ContextMessageCreateParams, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContextMessage>>;
    /**
     * Retrieve the Context with the given identifier.
     * @summary Retrieve a Context.
     * @param {string} context The unique identifier of the Context.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContext(context: string, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Context>>;
    /**
     * Retrieve the ContextMessage with the given identifier.
     * @summary Retrieve a ContextMessage.
     * @param {string} context The unique identifier of the Context.
     * @param {string} message The unique identifier of the ContextMessage.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContextMessage(context: string, message: string, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContextMessage>>;
    /**
     *
     * @summary Get a list of llms
     * @param {string} llm
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLLM(llm: string, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LLM>>;
    /**
     * List all ContextMessages associated with the given Context.
     * @summary List ContextMessages.
     * @param {string} context The unique identifier of the Context.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {Array<string>} [messageIds] A comma-separated list of message IDs to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listContextMessages(context: string, xHumanId?: string, messageIds?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListContextMessages200Response>>;
    /**
     *
     * @summary Get a list of llms
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listLLMs(xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListLLMs200Response>>;
};
/**
 * LLMApi - factory interface
 * @export
 */
export declare const LLMApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a new Context with the given configuration.
     * @summary Create a new Context.
     * @param {ContextCreateRequest} contextCreateRequest
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createContext(contextCreateRequest: ContextCreateRequest, xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Context>;
    /**
     * Create a new ContextMessage with the given configuration.
     * @summary Create a new ContextMessage.
     * @param {string} context The unique identifier of the Context.
     * @param {ContextMessageCreateParams} contextMessageCreateParams
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createContextMessage(context: string, contextMessageCreateParams: ContextMessageCreateParams, xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<ContextMessage>;
    /**
     * Retrieve the Context with the given identifier.
     * @summary Retrieve a Context.
     * @param {string} context The unique identifier of the Context.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContext(context: string, xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Context>;
    /**
     * Retrieve the ContextMessage with the given identifier.
     * @summary Retrieve a ContextMessage.
     * @param {string} context The unique identifier of the Context.
     * @param {string} message The unique identifier of the ContextMessage.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContextMessage(context: string, message: string, xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<ContextMessage>;
    /**
     *
     * @summary Get a list of llms
     * @param {string} llm
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLLM(llm: string, xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<LLM>;
    /**
     * List all ContextMessages associated with the given Context.
     * @summary List ContextMessages.
     * @param {string} context The unique identifier of the Context.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {Array<string>} [messageIds] A comma-separated list of message IDs to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listContextMessages(context: string, xHumanId?: string, messageIds?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<ListContextMessages200Response>;
    /**
     *
     * @summary Get a list of llms
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listLLMs(xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<ListLLMs200Response>;
};
/**
 * LLMApi - object-oriented interface
 * @export
 * @class LLMApi
 * @extends {BaseAPI}
 */
export declare class LLMApi extends BaseAPI {
    /**
     * Create a new Context with the given configuration.
     * @summary Create a new Context.
     * @param {ContextCreateRequest} contextCreateRequest
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LLMApi
     */
    createContext(contextCreateRequest: ContextCreateRequest, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Context, any>>;
    /**
     * Create a new ContextMessage with the given configuration.
     * @summary Create a new ContextMessage.
     * @param {string} context The unique identifier of the Context.
     * @param {ContextMessageCreateParams} contextMessageCreateParams
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LLMApi
     */
    createContextMessage(context: string, contextMessageCreateParams: ContextMessageCreateParams, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ContextMessage, any>>;
    /**
     * Retrieve the Context with the given identifier.
     * @summary Retrieve a Context.
     * @param {string} context The unique identifier of the Context.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LLMApi
     */
    getContext(context: string, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Context, any>>;
    /**
     * Retrieve the ContextMessage with the given identifier.
     * @summary Retrieve a ContextMessage.
     * @param {string} context The unique identifier of the Context.
     * @param {string} message The unique identifier of the ContextMessage.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LLMApi
     */
    getContextMessage(context: string, message: string, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ContextMessage, any>>;
    /**
     *
     * @summary Get a list of llms
     * @param {string} llm
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LLMApi
     */
    getLLM(llm: string, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<LLM, any>>;
    /**
     * List all ContextMessages associated with the given Context.
     * @summary List ContextMessages.
     * @param {string} context The unique identifier of the Context.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {Array<string>} [messageIds] A comma-separated list of message IDs to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LLMApi
     */
    listContextMessages(context: string, xHumanId?: string, messageIds?: Array<string>, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ListContextMessages200Response, any>>;
    /**
     *
     * @summary Get a list of llms
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LLMApi
     */
    listLLMs(xHumanId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ListLLMs200Response, any>>;
}
//# sourceMappingURL=llmapi.d.ts.map