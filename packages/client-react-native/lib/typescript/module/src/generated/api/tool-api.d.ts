/**
 * Gabber API Reference
 * The Gabber API is a set of APIs that allow you to interact with the Gabber platform.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { CreateToolDefinitionRequest } from '../model';
import type { ListToolDefinitions200Response } from '../model';
import type { ToolCallResult } from '../model';
import type { ToolDefinition } from '../model';
/**
 * ToolApi - axios parameter creator
 * @export
 */
export declare const ToolApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a tool definition
     * @summary Create a tool definition
     * @param {CreateToolDefinitionRequest} createToolDefinitionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createToolDefinition: (createToolDefinitionRequest: CreateToolDefinitionRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a tool definition
     * @summary Delete a tool definition
     * @param {string} tool
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteToolDefinition: (tool: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a tool call result
     * @summary Get a tool call result
     * @param {string} call
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getToolCallResult: (call: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a tool definition
     * @summary Get a tool definition
     * @param {string} tool
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getToolDefinition: (tool: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List tools
     * @summary List tools
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listToolDefinitions: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a tool definition
     * @summary Update a tool definition
     * @param {string} tool
     * @param {CreateToolDefinitionRequest} createToolDefinitionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateToolDefinition: (tool: string, createToolDefinitionRequest: CreateToolDefinitionRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ToolApi - functional programming interface
 * @export
 */
export declare const ToolApiFp: (configuration?: Configuration) => {
    /**
     * Create a tool definition
     * @summary Create a tool definition
     * @param {CreateToolDefinitionRequest} createToolDefinitionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createToolDefinition(createToolDefinitionRequest: CreateToolDefinitionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ToolDefinition>>;
    /**
     * Delete a tool definition
     * @summary Delete a tool definition
     * @param {string} tool
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteToolDefinition(tool: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get a tool call result
     * @summary Get a tool call result
     * @param {string} call
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getToolCallResult(call: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ToolCallResult>>;
    /**
     * Get a tool definition
     * @summary Get a tool definition
     * @param {string} tool
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getToolDefinition(tool: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ToolDefinition>>;
    /**
     * List tools
     * @summary List tools
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listToolDefinitions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListToolDefinitions200Response>>;
    /**
     * Update a tool definition
     * @summary Update a tool definition
     * @param {string} tool
     * @param {CreateToolDefinitionRequest} createToolDefinitionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateToolDefinition(tool: string, createToolDefinitionRequest: CreateToolDefinitionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ToolDefinition>>;
};
/**
 * ToolApi - factory interface
 * @export
 */
export declare const ToolApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a tool definition
     * @summary Create a tool definition
     * @param {CreateToolDefinitionRequest} createToolDefinitionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createToolDefinition(createToolDefinitionRequest: CreateToolDefinitionRequest, options?: RawAxiosRequestConfig): AxiosPromise<ToolDefinition>;
    /**
     * Delete a tool definition
     * @summary Delete a tool definition
     * @param {string} tool
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteToolDefinition(tool: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Get a tool call result
     * @summary Get a tool call result
     * @param {string} call
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getToolCallResult(call: string, options?: RawAxiosRequestConfig): AxiosPromise<ToolCallResult>;
    /**
     * Get a tool definition
     * @summary Get a tool definition
     * @param {string} tool
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getToolDefinition(tool: string, options?: RawAxiosRequestConfig): AxiosPromise<ToolDefinition>;
    /**
     * List tools
     * @summary List tools
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listToolDefinitions(options?: RawAxiosRequestConfig): AxiosPromise<ListToolDefinitions200Response>;
    /**
     * Update a tool definition
     * @summary Update a tool definition
     * @param {string} tool
     * @param {CreateToolDefinitionRequest} createToolDefinitionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateToolDefinition(tool: string, createToolDefinitionRequest: CreateToolDefinitionRequest, options?: RawAxiosRequestConfig): AxiosPromise<ToolDefinition>;
};
/**
 * ToolApi - object-oriented interface
 * @export
 * @class ToolApi
 * @extends {BaseAPI}
 */
export declare class ToolApi extends BaseAPI {
    /**
     * Create a tool definition
     * @summary Create a tool definition
     * @param {CreateToolDefinitionRequest} createToolDefinitionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    createToolDefinition(createToolDefinitionRequest: CreateToolDefinitionRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ToolDefinition, any>>;
    /**
     * Delete a tool definition
     * @summary Delete a tool definition
     * @param {string} tool
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    deleteToolDefinition(tool: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get a tool call result
     * @summary Get a tool call result
     * @param {string} call
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    getToolCallResult(call: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ToolCallResult, any>>;
    /**
     * Get a tool definition
     * @summary Get a tool definition
     * @param {string} tool
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    getToolDefinition(tool: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ToolDefinition, any>>;
    /**
     * List tools
     * @summary List tools
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    listToolDefinitions(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ListToolDefinitions200Response, any>>;
    /**
     * Update a tool definition
     * @summary Update a tool definition
     * @param {string} tool
     * @param {CreateToolDefinitionRequest} createToolDefinitionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolApi
     */
    updateToolDefinition(tool: string, createToolDefinitionRequest: CreateToolDefinitionRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ToolDefinition, any>>;
}
//# sourceMappingURL=tool-api.d.ts.map