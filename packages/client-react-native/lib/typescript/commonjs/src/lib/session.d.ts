import { SDKAgentState, SDKConnectionState } from "../generated";
import type { SDKConnectOptions, SDKSendChatMessageParams, SDKSessionTranscription } from "../generated";
export declare class RealtimeSessionEngine {
    private livekitRoom;
    private agentParticipant;
    private agentTrack;
    private _microphoneEnabledState;
    private transcriptions;
    private agentVolumeVisualizer;
    private userVolumeVisualizer;
    private onConnectionStateChanged;
    private onMessagesChanged;
    private onMicrophoneChanged;
    private onAgentVolumeChanged;
    private onUserVolumeChanged;
    private onAgentStateChanged;
    private onRemainingSecondsChanged;
    private onAgentError;
    private onCanPlayAudioChanged;
    private _agentState;
    private _remainingSeconds;
    id: string | null;
    constructor({ onConnectionStateChanged, onMessagesChanged, onMicrophoneChanged, onAgentVolumeChanged, onUserVolumeChanged, onAgentStateChanged, onRemainingSecondsChanged, onAgentError, onCanPlayAudioChanged, }: SessionEngineParams);
    connect(opts: SDKConnectOptions): Promise<void>;
    disconnect(): Promise<void>;
    startAudio(): Promise<void>;
    setMicrophoneEnabled(enabled: boolean): Promise<void>;
    sendChatMessage({ text }: SDKSendChatMessageParams): Promise<void>;
    private set agentState(value);
    private set remainingSeconds(value);
    destroy(): void;
    private set microphoneEnabledState(value);
    private resolveMicrophoneState;
    private onTrackUnmuted;
    private onTrackMuted;
    private onLocalTrackPublished;
    private onLocalTrackUnpublished;
    private onAudioPlaybackChangaed;
    private onRoomConnected;
    private onRoomDisconnected;
    private onTrackSubscribed;
    private onTrackUnsubscribed;
    private onDataReceived;
    private onParticipantMetadataChanged;
}
type ConnectionStateChangedCallback = (state: SDKConnectionState) => void;
type OnTranscriptionsChangedCallback = (transcriptions: SDKSessionTranscription[]) => void;
type OnMicrophoneCallback = (enabled: boolean) => void;
type OnVolumeCallback = (values: number[], volume: number) => void;
type OnAgentStateChanged = (state: SDKAgentState) => void;
type OnRemainingSecondsChanged = (seconds: number) => void;
type OnAgentErrorCallback = (msg: string) => void;
type OnCanPlayAudioChanged = (allowed: boolean) => void;
export type SessionEngineParams = {
    onConnectionStateChanged: ConnectionStateChangedCallback;
    onMessagesChanged: OnTranscriptionsChangedCallback;
    onMicrophoneChanged: OnMicrophoneCallback;
    onAgentStateChanged: OnAgentStateChanged;
    onRemainingSecondsChanged: OnRemainingSecondsChanged;
    onAgentVolumeChanged: OnVolumeCallback;
    onUserVolumeChanged: OnVolumeCallback;
    onAgentError: OnAgentErrorCallback;
    onCanPlayAudioChanged: OnCanPlayAudioChanged;
};
export {};
//# sourceMappingURL=session.d.ts.map