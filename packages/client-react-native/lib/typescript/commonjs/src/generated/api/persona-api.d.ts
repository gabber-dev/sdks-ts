/**
 * Gabber API Reference
 * The Gabber API is a set of APIs that allow you to interact with the Gabber platform.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { CreatePersonaRequest } from '../model';
import type { DeletePersona200Response } from '../model';
import type { ListPersonas200Response } from '../model';
import type { Persona } from '../model';
import type { UpdatePersonaRequest } from '../model';
/**
 * PersonaApi - axios parameter creator
 * @export
 */
export declare const PersonaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a persona
     * @param {CreatePersonaRequest} createPersonaRequest
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPersona: (createPersonaRequest: CreatePersonaRequest, xHumanId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a persona
     * @param {string} personaId
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePersona: (personaId: string, xHumanId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a persona
     * @param {string} personaId
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPersona: (personaId: string, xHumanId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a list of personas
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPersonas: (xHumanId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a persona
     * @param {string} personaId
     * @param {UpdatePersonaRequest} updatePersonaRequest
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePersona: (personaId: string, updatePersonaRequest: UpdatePersonaRequest, xHumanId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PersonaApi - functional programming interface
 * @export
 */
export declare const PersonaApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a persona
     * @param {CreatePersonaRequest} createPersonaRequest
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPersona(createPersonaRequest: CreatePersonaRequest, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Persona>>;
    /**
     *
     * @summary Delete a persona
     * @param {string} personaId
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePersona(personaId: string, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeletePersona200Response>>;
    /**
     *
     * @summary Get a persona
     * @param {string} personaId
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPersona(personaId: string, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Persona>>;
    /**
     *
     * @summary Get a list of personas
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPersonas(xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPersonas200Response>>;
    /**
     *
     * @summary Update a persona
     * @param {string} personaId
     * @param {UpdatePersonaRequest} updatePersonaRequest
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePersona(personaId: string, updatePersonaRequest: UpdatePersonaRequest, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Persona>>;
};
/**
 * PersonaApi - factory interface
 * @export
 */
export declare const PersonaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create a persona
     * @param {CreatePersonaRequest} createPersonaRequest
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPersona(createPersonaRequest: CreatePersonaRequest, xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Persona>;
    /**
     *
     * @summary Delete a persona
     * @param {string} personaId
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePersona(personaId: string, xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<DeletePersona200Response>;
    /**
     *
     * @summary Get a persona
     * @param {string} personaId
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPersona(personaId: string, xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Persona>;
    /**
     *
     * @summary Get a list of personas
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPersonas(xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<ListPersonas200Response>;
    /**
     *
     * @summary Update a persona
     * @param {string} personaId
     * @param {UpdatePersonaRequest} updatePersonaRequest
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePersona(personaId: string, updatePersonaRequest: UpdatePersonaRequest, xHumanId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Persona>;
};
/**
 * PersonaApi - object-oriented interface
 * @export
 * @class PersonaApi
 * @extends {BaseAPI}
 */
export declare class PersonaApi extends BaseAPI {
    /**
     *
     * @summary Create a persona
     * @param {CreatePersonaRequest} createPersonaRequest
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonaApi
     */
    createPersona(createPersonaRequest: CreatePersonaRequest, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Persona, any>>;
    /**
     *
     * @summary Delete a persona
     * @param {string} personaId
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonaApi
     */
    deletePersona(personaId: string, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeletePersona200Response, any>>;
    /**
     *
     * @summary Get a persona
     * @param {string} personaId
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonaApi
     */
    getPersona(personaId: string, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Persona, any>>;
    /**
     *
     * @summary Get a list of personas
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonaApi
     */
    listPersonas(xHumanId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ListPersonas200Response, any>>;
    /**
     *
     * @summary Update a persona
     * @param {string} personaId
     * @param {UpdatePersonaRequest} updatePersonaRequest
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonaApi
     */
    updatePersona(personaId: string, updatePersonaRequest: UpdatePersonaRequest, xHumanId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Persona, any>>;
}
//# sourceMappingURL=persona-api.d.ts.map