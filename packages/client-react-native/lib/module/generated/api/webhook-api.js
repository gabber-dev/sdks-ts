"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Gabber API Reference
 * The Gabber API is a set of APIs that allow you to interact with the Gabber platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from "../common.js";
// @ts-ignore
import { BASE_PATH, BaseAPI, operationServerMap } from "../base.js";
// @ts-ignore

/**
 * WebhookApi - axios parameter creator
 * @export
 */
export const WebhookApiAxiosParamCreator = function (configuration) {
  return {
    /**
     * Receives events from the server.
     * @summary Webhook
     * @param {string} xWebhookSignature Hex string of HMAC-SHA256 signature of the request body signed using your configured service key
     * @param {WebhookMessage} webhookMessage 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webhookPost: async (xWebhookSignature, webhookMessage, options = {}) => {
      // verify required parameter 'xWebhookSignature' is not null or undefined
      assertParamExists('webhookPost', 'xWebhookSignature', xWebhookSignature);
      // verify required parameter 'webhookMessage' is not null or undefined
      assertParamExists('webhookPost', 'webhookMessage', webhookMessage);
      const localVarPath = `/webhook`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter['Content-Type'] = 'application/json';
      if (xWebhookSignature != null) {
        localVarHeaderParameter['X-Webhook-Signature'] = String(xWebhookSignature);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(webhookMessage, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * WebhookApi - functional programming interface
 * @export
 */
export const WebhookApiFp = function (configuration) {
  const localVarAxiosParamCreator = WebhookApiAxiosParamCreator(configuration);
  return {
    /**
     * Receives events from the server.
     * @summary Webhook
     * @param {string} xWebhookSignature Hex string of HMAC-SHA256 signature of the request body signed using your configured service key
     * @param {WebhookMessage} webhookMessage 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async webhookPost(xWebhookSignature, webhookMessage, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.webhookPost(xWebhookSignature, webhookMessage, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap['WebhookApi.webhookPost']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    }
  };
};

/**
 * WebhookApi - factory interface
 * @export
 */
export const WebhookApiFactory = function (configuration, basePath, axios) {
  const localVarFp = WebhookApiFp(configuration);
  return {
    /**
     * Receives events from the server.
     * @summary Webhook
     * @param {string} xWebhookSignature Hex string of HMAC-SHA256 signature of the request body signed using your configured service key
     * @param {WebhookMessage} webhookMessage 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webhookPost(xWebhookSignature, webhookMessage, options) {
      return localVarFp.webhookPost(xWebhookSignature, webhookMessage, options).then(request => request(axios, basePath));
    }
  };
};

/**
 * WebhookApi - object-oriented interface
 * @export
 * @class WebhookApi
 * @extends {BaseAPI}
 */
export class WebhookApi extends BaseAPI {
  /**
   * Receives events from the server.
   * @summary Webhook
   * @param {string} xWebhookSignature Hex string of HMAC-SHA256 signature of the request body signed using your configured service key
   * @param {WebhookMessage} webhookMessage 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WebhookApi
   */
  webhookPost(xWebhookSignature, webhookMessage, options) {
    return WebhookApiFp(this.configuration).webhookPost(xWebhookSignature, webhookMessage, options).then(request => request(this.axios, this.basePath));
  }
}
//# sourceMappingURL=webhook-api.js.map