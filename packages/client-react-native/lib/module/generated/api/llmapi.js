"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Gabber API Reference
 * The Gabber API is a set of APIs that allow you to interact with the Gabber platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from "../common.js";
// @ts-ignore
import { BASE_PATH, BaseAPI, operationServerMap } from "../base.js";
// @ts-ignore

// @ts-ignore

// @ts-ignore

// @ts-ignore

// @ts-ignore

// @ts-ignore

// @ts-ignore

// @ts-ignore

// @ts-ignore

/**
 * LLMApi - axios parameter creator
 * @export
 */
export const LLMApiAxiosParamCreator = function (configuration) {
  return {
    /**
     * Create a new Context with the given configuration. 
     * @summary Create a new Context.
     * @param {ContextCreateRequest} contextCreateRequest 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createContext: async (contextCreateRequest, xHumanId, options = {}) => {
      // verify required parameter 'contextCreateRequest' is not null or undefined
      assertParamExists('createContext', 'contextCreateRequest', contextCreateRequest);
      const localVarPath = `/v1/llm/context`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter['Content-Type'] = 'application/json';
      if (xHumanId != null) {
        localVarHeaderParameter['x-human-id'] = String(xHumanId);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(contextCreateRequest, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Create a new ContextMessage with the given configuration. 
     * @summary Create a new ContextMessage.
     * @param {string} context The unique identifier of the Context.
     * @param {ContextMessageCreateParams} contextMessageCreateParams 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createContextMessage: async (context, contextMessageCreateParams, xHumanId, options = {}) => {
      // verify required parameter 'context' is not null or undefined
      assertParamExists('createContextMessage', 'context', context);
      // verify required parameter 'contextMessageCreateParams' is not null or undefined
      assertParamExists('createContextMessage', 'contextMessageCreateParams', contextMessageCreateParams);
      const localVarPath = `/v1/llm/context/{context}/message`.replace(`{${"context"}}`, encodeURIComponent(String(context)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter['Content-Type'] = 'application/json';
      if (xHumanId != null) {
        localVarHeaderParameter['x-human-id'] = String(xHumanId);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(contextMessageCreateParams, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Retrieve the Context with the given identifier. 
     * @summary Retrieve a Context.
     * @param {string} context The unique identifier of the Context.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContext: async (context, xHumanId, options = {}) => {
      // verify required parameter 'context' is not null or undefined
      assertParamExists('getContext', 'context', context);
      const localVarPath = `/v1/llm/context/{context}`.replace(`{${"context"}}`, encodeURIComponent(String(context)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (xHumanId != null) {
        localVarHeaderParameter['x-human-id'] = String(xHumanId);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Retrieve the ContextMessage with the given identifier. 
     * @summary Retrieve a ContextMessage.
     * @param {string} context The unique identifier of the Context.
     * @param {string} message The unique identifier of the ContextMessage.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContextMessage: async (context, message, xHumanId, options = {}) => {
      // verify required parameter 'context' is not null or undefined
      assertParamExists('getContextMessage', 'context', context);
      // verify required parameter 'message' is not null or undefined
      assertParamExists('getContextMessage', 'message', message);
      const localVarPath = `/v1/llm/context/{context}/message/{message}`.replace(`{${"context"}}`, encodeURIComponent(String(context))).replace(`{${"message"}}`, encodeURIComponent(String(message)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (xHumanId != null) {
        localVarHeaderParameter['x-human-id'] = String(xHumanId);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Get a list of llms
     * @param {string} llm 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLLM: async (llm, xHumanId, options = {}) => {
      // verify required parameter 'llm' is not null or undefined
      assertParamExists('getLLM', 'llm', llm);
      const localVarPath = `/v1/llm/{llm}`.replace(`{${"llm"}}`, encodeURIComponent(String(llm)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (xHumanId != null) {
        localVarHeaderParameter['x-human-id'] = String(xHumanId);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * List all ContextMessages associated with the given Context. 
     * @summary List ContextMessages.
     * @param {string} context The unique identifier of the Context.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {Array<string>} [messageIds] A comma-separated list of message IDs to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listContextMessages: async (context, xHumanId, messageIds, options = {}) => {
      // verify required parameter 'context' is not null or undefined
      assertParamExists('listContextMessages', 'context', context);
      const localVarPath = `/v1/llm/context/{context}/message/list`.replace(`{${"context"}}`, encodeURIComponent(String(context)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (messageIds) {
        localVarQueryParameter['message_ids'] = messageIds;
      }
      if (xHumanId != null) {
        localVarHeaderParameter['x-human-id'] = String(xHumanId);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Get a list of llms
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listLLMs: async (xHumanId, options = {}) => {
      const localVarPath = `/v1/llm/list`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (xHumanId != null) {
        localVarHeaderParameter['x-human-id'] = String(xHumanId);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * LLMApi - functional programming interface
 * @export
 */
export const LLMApiFp = function (configuration) {
  const localVarAxiosParamCreator = LLMApiAxiosParamCreator(configuration);
  return {
    /**
     * Create a new Context with the given configuration. 
     * @summary Create a new Context.
     * @param {ContextCreateRequest} contextCreateRequest 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createContext(contextCreateRequest, xHumanId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createContext(contextCreateRequest, xHumanId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap['LLMApi.createContext']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Create a new ContextMessage with the given configuration. 
     * @summary Create a new ContextMessage.
     * @param {string} context The unique identifier of the Context.
     * @param {ContextMessageCreateParams} contextMessageCreateParams 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createContextMessage(context, contextMessageCreateParams, xHumanId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createContextMessage(context, contextMessageCreateParams, xHumanId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap['LLMApi.createContextMessage']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Retrieve the Context with the given identifier. 
     * @summary Retrieve a Context.
     * @param {string} context The unique identifier of the Context.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getContext(context, xHumanId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getContext(context, xHumanId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap['LLMApi.getContext']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Retrieve the ContextMessage with the given identifier. 
     * @summary Retrieve a ContextMessage.
     * @param {string} context The unique identifier of the Context.
     * @param {string} message The unique identifier of the ContextMessage.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getContextMessage(context, message, xHumanId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getContextMessage(context, message, xHumanId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap['LLMApi.getContextMessage']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 
     * @summary Get a list of llms
     * @param {string} llm 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getLLM(llm, xHumanId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getLLM(llm, xHumanId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap['LLMApi.getLLM']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * List all ContextMessages associated with the given Context. 
     * @summary List ContextMessages.
     * @param {string} context The unique identifier of the Context.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {Array<string>} [messageIds] A comma-separated list of message IDs to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listContextMessages(context, xHumanId, messageIds, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listContextMessages(context, xHumanId, messageIds, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap['LLMApi.listContextMessages']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 
     * @summary Get a list of llms
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listLLMs(xHumanId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listLLMs(xHumanId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap['LLMApi.listLLMs']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    }
  };
};

/**
 * LLMApi - factory interface
 * @export
 */
export const LLMApiFactory = function (configuration, basePath, axios) {
  const localVarFp = LLMApiFp(configuration);
  return {
    /**
     * Create a new Context with the given configuration. 
     * @summary Create a new Context.
     * @param {ContextCreateRequest} contextCreateRequest 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createContext(contextCreateRequest, xHumanId, options) {
      return localVarFp.createContext(contextCreateRequest, xHumanId, options).then(request => request(axios, basePath));
    },
    /**
     * Create a new ContextMessage with the given configuration. 
     * @summary Create a new ContextMessage.
     * @param {string} context The unique identifier of the Context.
     * @param {ContextMessageCreateParams} contextMessageCreateParams 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createContextMessage(context, contextMessageCreateParams, xHumanId, options) {
      return localVarFp.createContextMessage(context, contextMessageCreateParams, xHumanId, options).then(request => request(axios, basePath));
    },
    /**
     * Retrieve the Context with the given identifier. 
     * @summary Retrieve a Context.
     * @param {string} context The unique identifier of the Context.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContext(context, xHumanId, options) {
      return localVarFp.getContext(context, xHumanId, options).then(request => request(axios, basePath));
    },
    /**
     * Retrieve the ContextMessage with the given identifier. 
     * @summary Retrieve a ContextMessage.
     * @param {string} context The unique identifier of the Context.
     * @param {string} message The unique identifier of the ContextMessage.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContextMessage(context, message, xHumanId, options) {
      return localVarFp.getContextMessage(context, message, xHumanId, options).then(request => request(axios, basePath));
    },
    /**
     * 
     * @summary Get a list of llms
     * @param {string} llm 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLLM(llm, xHumanId, options) {
      return localVarFp.getLLM(llm, xHumanId, options).then(request => request(axios, basePath));
    },
    /**
     * List all ContextMessages associated with the given Context. 
     * @summary List ContextMessages.
     * @param {string} context The unique identifier of the Context.
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {Array<string>} [messageIds] A comma-separated list of message IDs to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listContextMessages(context, xHumanId, messageIds, options) {
      return localVarFp.listContextMessages(context, xHumanId, messageIds, options).then(request => request(axios, basePath));
    },
    /**
     * 
     * @summary Get a list of llms
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listLLMs(xHumanId, options) {
      return localVarFp.listLLMs(xHumanId, options).then(request => request(axios, basePath));
    }
  };
};

/**
 * LLMApi - object-oriented interface
 * @export
 * @class LLMApi
 * @extends {BaseAPI}
 */
export class LLMApi extends BaseAPI {
  /**
   * Create a new Context with the given configuration. 
   * @summary Create a new Context.
   * @param {ContextCreateRequest} contextCreateRequest 
   * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LLMApi
   */
  createContext(contextCreateRequest, xHumanId, options) {
    return LLMApiFp(this.configuration).createContext(contextCreateRequest, xHumanId, options).then(request => request(this.axios, this.basePath));
  }

  /**
   * Create a new ContextMessage with the given configuration. 
   * @summary Create a new ContextMessage.
   * @param {string} context The unique identifier of the Context.
   * @param {ContextMessageCreateParams} contextMessageCreateParams 
   * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LLMApi
   */
  createContextMessage(context, contextMessageCreateParams, xHumanId, options) {
    return LLMApiFp(this.configuration).createContextMessage(context, contextMessageCreateParams, xHumanId, options).then(request => request(this.axios, this.basePath));
  }

  /**
   * Retrieve the Context with the given identifier. 
   * @summary Retrieve a Context.
   * @param {string} context The unique identifier of the Context.
   * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LLMApi
   */
  getContext(context, xHumanId, options) {
    return LLMApiFp(this.configuration).getContext(context, xHumanId, options).then(request => request(this.axios, this.basePath));
  }

  /**
   * Retrieve the ContextMessage with the given identifier. 
   * @summary Retrieve a ContextMessage.
   * @param {string} context The unique identifier of the Context.
   * @param {string} message The unique identifier of the ContextMessage.
   * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LLMApi
   */
  getContextMessage(context, message, xHumanId, options) {
    return LLMApiFp(this.configuration).getContextMessage(context, message, xHumanId, options).then(request => request(this.axios, this.basePath));
  }

  /**
   * 
   * @summary Get a list of llms
   * @param {string} llm 
   * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LLMApi
   */
  getLLM(llm, xHumanId, options) {
    return LLMApiFp(this.configuration).getLLM(llm, xHumanId, options).then(request => request(this.axios, this.basePath));
  }

  /**
   * List all ContextMessages associated with the given Context. 
   * @summary List ContextMessages.
   * @param {string} context The unique identifier of the Context.
   * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
   * @param {Array<string>} [messageIds] A comma-separated list of message IDs to fetch.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LLMApi
   */
  listContextMessages(context, xHumanId, messageIds, options) {
    return LLMApiFp(this.configuration).listContextMessages(context, xHumanId, messageIds, options).then(request => request(this.axios, this.basePath));
  }

  /**
   * 
   * @summary Get a list of llms
   * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LLMApi
   */
  listLLMs(xHumanId, options) {
    return LLMApiFp(this.configuration).listLLMs(xHumanId, options).then(request => request(this.axios, this.basePath));
  }
}
//# sourceMappingURL=llmapi.js.map