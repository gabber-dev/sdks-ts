"use strict";

/* tslint:disable */
/* eslint-disable */
/**
 * Gabber API Reference
 * The Gabber API is a set of APIs that allow you to interact with the Gabber platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from "../common.js";
// @ts-ignore
import { BASE_PATH, BaseAPI, operationServerMap } from "../base.js";
// @ts-ignore

// @ts-ignore

// @ts-ignore

// @ts-ignore

// @ts-ignore

// @ts-ignore

/**
 * CreditApi - axios parameter creator
 * @export
 */
export const CreditApiAxiosParamCreator = function (configuration) {
  return {
    /**
     * Creates a new credit based on the input request data. 
     * @summary Create a new credit type
     * @param {CreateCreditRequest} createCreditRequest 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCredit: async (createCreditRequest, xHumanId, options = {}) => {
      // verify required parameter 'createCreditRequest' is not null or undefined
      assertParamExists('createCredit', 'createCreditRequest', createCreditRequest);
      const localVarPath = `/v1/credit`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
      localVarHeaderParameter['Content-Type'] = 'application/json';
      if (xHumanId != null) {
        localVarHeaderParameter['x-human-id'] = String(xHumanId);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(createCreditRequest, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Creates a new credit ledger entry for human. Requires a human id.
     * @summary Create a new credit ledger entry
     * @param {string} credit 
     * @param {CreateCreditLedgerEntryRequest} createCreditLedgerEntryRequest 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCreditLedgerEntry: async (credit, createCreditLedgerEntryRequest, xHumanId, options = {}) => {
      // verify required parameter 'credit' is not null or undefined
      assertParamExists('createCreditLedgerEntry', 'credit', credit);
      // verify required parameter 'createCreditLedgerEntryRequest' is not null or undefined
      assertParamExists('createCreditLedgerEntry', 'createCreditLedgerEntryRequest', createCreditLedgerEntryRequest);
      const localVarPath = `/v1/credit/{credit}/ledger`.replace(`{${"credit"}}`, encodeURIComponent(String(credit)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);
      localVarHeaderParameter['Content-Type'] = 'application/json';
      if (xHumanId != null) {
        localVarHeaderParameter['x-human-id'] = String(xHumanId);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(createCreditLedgerEntryRequest, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Get a single credit object
     * @param {string} credit 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCredit: async (credit, xHumanId, options = {}) => {
      // verify required parameter 'credit' is not null or undefined
      assertParamExists('getCredit', 'credit', credit);
      const localVarPath = `/v1/credit/{credit}`.replace(`{${"credit"}}`, encodeURIComponent(String(credit)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (xHumanId != null) {
        localVarHeaderParameter['x-human-id'] = String(xHumanId);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Get the latest credit ledger entry for a human. Requires a human id.
     * @param {string} credit 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestCreditLedgerEntry: async (credit, xHumanId, options = {}) => {
      // verify required parameter 'credit' is not null or undefined
      assertParamExists('getLatestCreditLedgerEntry', 'credit', credit);
      const localVarPath = `/v1/credit/{credit}/ledger/latest`.replace(`{${"credit"}}`, encodeURIComponent(String(credit)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (xHumanId != null) {
        localVarHeaderParameter['x-human-id'] = String(xHumanId);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Get a list of credits
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCredits: async (xHumanId, options = {}) => {
      const localVarPath = `/v1/credit/list`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};

      // authentication ApiKeyAuth required
      await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (xHumanId != null) {
        localVarHeaderParameter['x-human-id'] = String(xHumanId);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * CreditApi - functional programming interface
 * @export
 */
export const CreditApiFp = function (configuration) {
  const localVarAxiosParamCreator = CreditApiAxiosParamCreator(configuration);
  return {
    /**
     * Creates a new credit based on the input request data. 
     * @summary Create a new credit type
     * @param {CreateCreditRequest} createCreditRequest 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCredit(createCreditRequest, xHumanId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createCredit(createCreditRequest, xHumanId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap['CreditApi.createCredit']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Creates a new credit ledger entry for human. Requires a human id.
     * @summary Create a new credit ledger entry
     * @param {string} credit 
     * @param {CreateCreditLedgerEntryRequest} createCreditLedgerEntryRequest 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCreditLedgerEntry(credit, createCreditLedgerEntryRequest, xHumanId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createCreditLedgerEntry(credit, createCreditLedgerEntryRequest, xHumanId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap['CreditApi.createCreditLedgerEntry']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 
     * @summary Get a single credit object
     * @param {string} credit 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCredit(credit, xHumanId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCredit(credit, xHumanId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap['CreditApi.getCredit']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 
     * @summary Get the latest credit ledger entry for a human. Requires a human id.
     * @param {string} credit 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getLatestCreditLedgerEntry(credit, xHumanId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getLatestCreditLedgerEntry(credit, xHumanId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap['CreditApi.getLatestCreditLedgerEntry']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 
     * @summary Get a list of credits
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listCredits(xHumanId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listCredits(xHumanId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap['CreditApi.listCredits']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    }
  };
};

/**
 * CreditApi - factory interface
 * @export
 */
export const CreditApiFactory = function (configuration, basePath, axios) {
  const localVarFp = CreditApiFp(configuration);
  return {
    /**
     * Creates a new credit based on the input request data. 
     * @summary Create a new credit type
     * @param {CreateCreditRequest} createCreditRequest 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCredit(createCreditRequest, xHumanId, options) {
      return localVarFp.createCredit(createCreditRequest, xHumanId, options).then(request => request(axios, basePath));
    },
    /**
     * Creates a new credit ledger entry for human. Requires a human id.
     * @summary Create a new credit ledger entry
     * @param {string} credit 
     * @param {CreateCreditLedgerEntryRequest} createCreditLedgerEntryRequest 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCreditLedgerEntry(credit, createCreditLedgerEntryRequest, xHumanId, options) {
      return localVarFp.createCreditLedgerEntry(credit, createCreditLedgerEntryRequest, xHumanId, options).then(request => request(axios, basePath));
    },
    /**
     * 
     * @summary Get a single credit object
     * @param {string} credit 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCredit(credit, xHumanId, options) {
      return localVarFp.getCredit(credit, xHumanId, options).then(request => request(axios, basePath));
    },
    /**
     * 
     * @summary Get the latest credit ledger entry for a human. Requires a human id.
     * @param {string} credit 
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestCreditLedgerEntry(credit, xHumanId, options) {
      return localVarFp.getLatestCreditLedgerEntry(credit, xHumanId, options).then(request => request(axios, basePath));
    },
    /**
     * 
     * @summary Get a list of credits
     * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCredits(xHumanId, options) {
      return localVarFp.listCredits(xHumanId, options).then(request => request(axios, basePath));
    }
  };
};

/**
 * CreditApi - object-oriented interface
 * @export
 * @class CreditApi
 * @extends {BaseAPI}
 */
export class CreditApi extends BaseAPI {
  /**
   * Creates a new credit based on the input request data. 
   * @summary Create a new credit type
   * @param {CreateCreditRequest} createCreditRequest 
   * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CreditApi
   */
  createCredit(createCreditRequest, xHumanId, options) {
    return CreditApiFp(this.configuration).createCredit(createCreditRequest, xHumanId, options).then(request => request(this.axios, this.basePath));
  }

  /**
   * Creates a new credit ledger entry for human. Requires a human id.
   * @summary Create a new credit ledger entry
   * @param {string} credit 
   * @param {CreateCreditLedgerEntryRequest} createCreditLedgerEntryRequest 
   * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CreditApi
   */
  createCreditLedgerEntry(credit, createCreditLedgerEntryRequest, xHumanId, options) {
    return CreditApiFp(this.configuration).createCreditLedgerEntry(credit, createCreditLedgerEntryRequest, xHumanId, options).then(request => request(this.axios, this.basePath));
  }

  /**
   * 
   * @summary Get a single credit object
   * @param {string} credit 
   * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CreditApi
   */
  getCredit(credit, xHumanId, options) {
    return CreditApiFp(this.configuration).getCredit(credit, xHumanId, options).then(request => request(this.axios, this.basePath));
  }

  /**
   * 
   * @summary Get the latest credit ledger entry for a human. Requires a human id.
   * @param {string} credit 
   * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CreditApi
   */
  getLatestCreditLedgerEntry(credit, xHumanId, options) {
    return CreditApiFp(this.configuration).getLatestCreditLedgerEntry(credit, xHumanId, options).then(request => request(this.axios, this.basePath));
  }

  /**
   * 
   * @summary Get a list of credits
   * @param {string} [xHumanId] When using x-api-key authentication, this header is used to scope requests to a specific human.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CreditApi
   */
  listCredits(xHumanId, options) {
    return CreditApiFp(this.configuration).listCredits(xHumanId, options).then(request => request(this.axios, this.basePath));
  }
}
//# sourceMappingURL=credit-api.js.map